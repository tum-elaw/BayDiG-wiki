"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AnchoredOverlay = void 0;

var _react = _interopRequireWildcard(require("react"));

var _Overlay = _interopRequireDefault(require("../Overlay"));

var _useFocusTrap = require("../hooks/useFocusTrap");

var _useFocusZone = require("../hooks/useFocusZone");

var _hooks = require("../hooks");

var _uniqueId = require("../utils/uniqueId");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * An `AnchoredOverlay` provides an anchor that will open a floating overlay positioned relative to the anchor.
 * The overlay can be opened and navigated using keyboard or mouse.
 */
const AnchoredOverlay = ({
  renderAnchor,
  children,
  open,
  onOpen,
  onClose,
  height,
  width,
  overlayProps,
  focusZoneSettings
}) => {
  const anchorRef = (0, _react.useRef)(null);
  const [overlayRef, updateOverlayRef] = (0, _hooks.useRenderForcingRef)();
  const anchorId = (0, _react.useMemo)(_uniqueId.uniqueId, []);
  const onClickOutside = (0, _react.useCallback)(() => onClose === null || onClose === void 0 ? void 0 : onClose('click-outside'), [onClose]);
  const onEscape = (0, _react.useCallback)(() => onClose === null || onClose === void 0 ? void 0 : onClose('escape'), [onClose]);
  const onAnchorKeyDown = (0, _react.useCallback)(event => {
    if (!event.defaultPrevented) {
      if (!open && ['ArrowDown', 'ArrowUp', ' ', 'Enter'].includes(event.key)) {
        onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-key-press');
        event.preventDefault();
      }
    }
  }, [open, onOpen]);
  const onAnchorClick = (0, _react.useCallback)(event => {
    if (!event.defaultPrevented && event.button === 0 && !open) {
      onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-click');
    }
  }, [open, onOpen]);
  const {
    position
  } = (0, _hooks.useAnchoredPosition)({
    anchorElementRef: anchorRef,
    floatingElementRef: overlayRef
  }, [overlayRef.current]);
  const overlayPosition = (0, _react.useMemo)(() => {
    return position && {
      top: `${position.top}px`,
      left: `${position.left}px`
    };
  }, [position]);
  (0, _useFocusZone.useFocusZone)({
    containerRef: overlayRef,
    disabled: !open || !position,
    ...focusZoneSettings
  });
  (0, _useFocusTrap.useFocusTrap)({
    containerRef: overlayRef,
    disabled: !open || !position
  });
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, renderAnchor({
    ref: anchorRef,
    id: anchorId,
    'aria-labelledby': anchorId,
    'aria-haspopup': 'listbox',
    tabIndex: 0,
    onClick: onAnchorClick,
    onKeyDown: onAnchorKeyDown
  }), open ? /*#__PURE__*/_react.default.createElement(_Overlay.default, _extends({
    returnFocusRef: anchorRef,
    onClickOutside: onClickOutside,
    onEscape: onEscape,
    ref: updateOverlayRef,
    role: "listbox",
    visibility: position ? 'visible' : 'hidden',
    height: height,
    width: width
  }, overlayPosition, overlayProps), children) : null);
};

exports.AnchoredOverlay = AnchoredOverlay;
AnchoredOverlay.displayName = 'AnchoredOverlay';