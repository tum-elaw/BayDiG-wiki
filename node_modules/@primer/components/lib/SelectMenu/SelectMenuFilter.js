"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _constants = require("../constants");

var _sx = _interopRequireDefault(require("../sx"));

var _TextInput = _interopRequireDefault(require("../TextInput"));

var _SelectMenuContext = require("./SelectMenuContext");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const StyledForm = _styledComponents.default.form.withConfig({
  displayName: "SelectMenuFilter__StyledForm",
  componentId: "s7ktlh-0"
})(["padding:", ";margin:0;border-bottom:", " solid ", ";background-color:", ";", ";@media (min-width:", "){padding:", ";}", ";"], (0, _constants.get)('space.3'), (0, _constants.get)('borderWidths.1'), (0, _constants.get)('colors.selectMenu.borderSecondary'), (0, _constants.get)('colors.bg.overlay'), _constants.COMMON, (0, _constants.get)('breakpoints.0'), (0, _constants.get)('space.2'), _sx.default);

const SelectMenuFilter = (0, _react.forwardRef)(({
  theme,
  value,
  sx: sxProp,
  ...rest
}, forwardedRef) => {
  const inputRef = (0, _react.useRef)(null);
  const ref = forwardedRef !== null && forwardedRef !== void 0 ? forwardedRef : inputRef;
  const {
    open
  } = (0, _react.useContext)(_SelectMenuContext.MenuContext); // puts focus on the filter input when the menu is opened

  (0, _react.useEffect)(() => {
    if (open) {
      var _inputRef$current;

      (_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.focus();
    }
  }, [open]);
  return /*#__PURE__*/_react.default.createElement(StyledForm, {
    theme: theme,
    sx: sxProp
  }, /*#__PURE__*/_react.default.createElement(_TextInput.default, _extends({
    theme: theme,
    ref: ref,
    width: "100%",
    block: true,
    value: value,
    contrast: true
  }, rest)));
});
SelectMenuFilter.displayName = 'SelectMenu.Filter';
var _default = SelectMenuFilter;
exports.default = _default;