import React from 'react';
import { SystemCommonProps } from '../constants';
import { SxProp } from '../sx';
import { ComponentProps } from '../utils/types';
declare const StyledSelectMenu: import("styled-components").StyledComponent<"details", any, SystemCommonProps & SxProp, never>;
declare type SelectMenuInternalProps = {
    initialTab?: string;
    as?: React.ReactElement;
} & ComponentProps<typeof StyledSelectMenu>;
declare const SelectMenu: React.ForwardRefExoticComponent<Pick<SelectMenuInternalProps, "backgroundColor" | "color" | "display" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "opacity" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "translate" | "margin" | "padding" | "hidden" | "children" | "theme" | "p" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "bg" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "marginX" | "my" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "paddingX" | "py" | "paddingY" | "open" | "sx" | "onToggle" | "as" | "initialTab"> & React.RefAttributes<HTMLElement>>;
export declare type SelectMenuProps = ComponentProps<typeof SelectMenu>;
export type { SelectMenuDividerProps } from './SelectMenuDivider';
export type { SelectMenuFilterProps } from './SelectMenuFilter';
export type { SelectMenuFooterProps } from './SelectMenuFooter';
export type { SelectMenuHeaderProps } from './SelectMenuHeader';
export type { SelectMenuItemProps } from './SelectMenuItem';
export type { SelectMenuListProps } from './SelectMenuList';
export type { SelectMenuLoadingAnimationProps } from './SelectMenuLoadingAnimation';
export type { SelectMenuModalProps } from './SelectMenuModal';
export type { SelectMenuTabProps } from './SelectMenuTab';
export type { SelectMenuTabPanelProps } from './SelectMenuTabPanel';
export type { SelectMenuTabsProps } from './SelectMenuTabs';
declare const _default: React.ForwardRefExoticComponent<Pick<SelectMenuInternalProps, "backgroundColor" | "color" | "display" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "opacity" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "translate" | "margin" | "padding" | "hidden" | "children" | "theme" | "p" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "bg" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "marginX" | "my" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "paddingX" | "py" | "paddingY" | "open" | "sx" | "onToggle" | "as" | "initialTab"> & React.RefAttributes<HTMLElement>> & {
    MenuContext: React.Context<{
        selectedTab?: string | undefined;
        setSelectedTab?: React.Dispatch<React.SetStateAction<string>> | undefined;
        setOpen?: React.Dispatch<React.SetStateAction<boolean>> | undefined;
        open?: boolean | undefined;
        initialTab?: string | undefined;
    }>;
    List: import("styled-components").StyledComponent<"div", any, SystemCommonProps & SxProp, never>;
    Divider: import("styled-components").StyledComponent<"div", any, SystemCommonProps & SxProp, never>;
    Filter: React.ForwardRefExoticComponent<Pick<{
        value?: string | undefined;
    } & Pick<{
        as?: any;
        icon?: React.ComponentType<{
            className?: string | undefined;
        }> | undefined;
    } & {
        backgroundColor?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        color?: (string & import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>>) | undefined;
        display?: import("styled-system").ResponsiveValue<import("csstype").Property.Display, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        maxWidth?: import("styled-system").ResponsiveValue<import("csstype").Property.MaxWidth<import("styled-system").TLengthStyledSystem>, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        minWidth?: import("styled-system").ResponsiveValue<import("csstype").Property.MinWidth<import("styled-system").TLengthStyledSystem>, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        opacity?: import("styled-system").ResponsiveValue<import("csstype").Property.Opacity, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        translate?: "yes" | "no" | undefined;
        width?: import("styled-system").ResponsiveValue<import("csstype").Property.Width<import("styled-system").TLengthStyledSystem>, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        margin?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        padding?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        hidden?: boolean | undefined;
        children?: React.ReactNode;
        ref?: ((instance: HTMLSpanElement | null) => void) | React.RefObject<HTMLSpanElement> | null | undefined;
        p?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLSpanElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLSpanElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLSpanElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLSpanElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLSpanElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLSpanElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLSpanElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLSpanElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLSpanElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLSpanElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLSpanElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLSpanElement> | undefined;
        onChange?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onInput?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onReset?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLSpanElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onError?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLSpanElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLSpanElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLSpanElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLSpanElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLSpanElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLSpanElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLSpanElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLSpanElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLSpanElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLSpanElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLSpanElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLSpanElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLSpanElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLSpanElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLSpanElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLSpanElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLSpanElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLSpanElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLSpanElement> | undefined;
        css?: import("@emotion/core").InterpolationWithTheme<any>;
        block?: boolean | undefined;
        bg?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        m?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        ml?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mx?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        my?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pl?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        px?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        py?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        sx?: import("@styled-system/css").SystemStyleObject | undefined;
        disabled?: boolean | undefined;
        variant?: "large" | "small" | undefined;
        hasIcon?: boolean | undefined;
        contrast?: boolean | undefined;
    } & {
        theme?: any;
    } & {
        color?: string | undefined;
        height?: string | number | undefined;
        translate?: "yes" | "no" | undefined;
        width?: string | number | undefined;
        hidden?: boolean | undefined;
        children?: React.ReactNode;
        value?: string | number | readonly string[] | undefined;
        ref?: ((instance: HTMLInputElement | null) => void) | React.RefObject<HTMLInputElement> | null | undefined;
        form?: string | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        pattern?: string | undefined;
        list?: string | undefined;
        type?: string | undefined;
        name?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLInputElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLInputElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLInputElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLInputElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLInputElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLInputElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLInputElement> | undefined;
        onChange?: React.ChangeEventHandler<HTMLInputElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLInputElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
        onInput?: React.FormEventHandler<HTMLInputElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
        onReset?: React.FormEventHandler<HTMLInputElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLInputElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLInputElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLInputElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onError?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLInputElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLInputElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLInputElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLInputElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLInputElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLInputElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLInputElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLInputElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLInputElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLInputElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLInputElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLInputElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLInputElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLInputElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLInputElement> | undefined;
        css?: import("@emotion/core").InterpolationWithTheme<any>;
        step?: string | number | undefined;
        size?: number | undefined;
        max?: string | number | undefined;
        min?: string | number | undefined;
        crossOrigin?: string | undefined;
        alt?: string | undefined;
        src?: string | undefined;
        autoFocus?: boolean | undefined;
        disabled?: boolean | undefined;
        formAction?: string | undefined;
        formEncType?: string | undefined;
        formMethod?: string | undefined;
        formNoValidate?: boolean | undefined;
        formTarget?: string | undefined;
        autoComplete?: string | undefined;
        accept?: string | undefined;
        capture?: string | boolean | undefined;
        checked?: boolean | undefined;
        enterKeyHint?: "search" | "enter" | "done" | "go" | "next" | "previous" | "send" | undefined;
        maxLength?: number | undefined;
        minLength?: number | undefined;
        multiple?: boolean | undefined;
        readOnly?: boolean | undefined;
        required?: boolean | undefined;
    }, "backgroundColor" | "color" | "display" | "height" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "maxWidth" | "minWidth" | "opacity" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "translate" | "width" | "margin" | "padding" | "hidden" | "children" | "theme" | "value" | "form" | "p" | "slot" | "style" | "title" | "pattern" | "list" | "type" | "name" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "block" | "bg" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "marginX" | "my" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "paddingX" | "py" | "paddingY" | "step" | "size" | "icon" | "sx" | "max" | "min" | "crossOrigin" | "alt" | "src" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "autoComplete" | "accept" | "capture" | "checked" | "enterKeyHint" | "maxLength" | "minLength" | "multiple" | "readOnly" | "required" | "as" | "variant" | "hasIcon" | "contrast"> & React.RefAttributes<HTMLInputElement>, "backgroundColor" | "color" | "display" | "height" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "maxWidth" | "minWidth" | "opacity" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "translate" | "width" | "margin" | "padding" | "hidden" | "children" | "theme" | "value" | "form" | "p" | "slot" | "style" | "title" | "pattern" | "list" | "type" | "name" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "block" | "bg" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "marginX" | "my" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "paddingX" | "py" | "paddingY" | "step" | "size" | "icon" | "sx" | "max" | "min" | "crossOrigin" | "alt" | "src" | "autoFocus" | "disabled" | "formAction" | "formEncType" | "formMethod" | "formNoValidate" | "formTarget" | "autoComplete" | "accept" | "capture" | "checked" | "enterKeyHint" | "maxLength" | "minLength" | "multiple" | "readOnly" | "required" | "as" | "variant" | "hasIcon" | "contrast"> & React.RefAttributes<HTMLInputElement>>;
    Footer: import("styled-components").StyledComponent<"footer", any, SystemCommonProps & SxProp, never>;
    Item: React.ForwardRefExoticComponent<Pick<{
        as?: React.ElementType<any> | undefined;
        selected?: boolean | undefined;
    } & {
        backgroundColor?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        color?: (string & import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>>) | undefined;
        display?: import("styled-system").ResponsiveValue<import("csstype").Property.Display, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        opacity?: import("styled-system").ResponsiveValue<import("csstype").Property.Opacity, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        translate?: "yes" | "no" | undefined;
        margin?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        padding?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        hidden?: boolean | undefined;
        children?: React.ReactNode;
        ref?: ((instance: HTMLAnchorElement | null) => void) | React.RefObject<HTMLAnchorElement> | null | undefined;
        p?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        type?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: ((React.AriaRole | undefined) & "menuitemcheckbox") | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLAnchorElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLAnchorElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLAnchorElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLAnchorElement> | undefined;
        onChange?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onInput?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onReset?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLAnchorElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onError?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLAnchorElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLAnchorElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLAnchorElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLAnchorElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLAnchorElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLAnchorElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLAnchorElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLAnchorElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLAnchorElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLAnchorElement> | undefined;
        css?: import("@emotion/core").InterpolationWithTheme<any>;
        bg?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        m?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        ml?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mx?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        my?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pl?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        px?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        py?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        sx?: import("@styled-system/css").SystemStyleObject | undefined;
        media?: string | undefined;
        target?: string | undefined;
        href?: string | undefined;
        download?: any;
        hrefLang?: string | undefined;
        ping?: string | undefined;
        rel?: string | undefined;
        referrerPolicy?: React.HTMLAttributeReferrerPolicy | undefined;
    } & {
        theme?: any;
    }, "translate" | "hidden" | "children" | "theme" | "slot" | "style" | "title" | "type" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | keyof SystemCommonProps | "sx" | "media" | "target" | "href" | "download" | "hrefLang" | "ping" | "rel" | "referrerPolicy" | "as" | "selected"> & React.RefAttributes<HTMLAnchorElement>>;
    Modal: React.ForwardRefExoticComponent<Pick<Pick<{
        filter?: boolean | undefined;
    } & import("styled-system").WidthProps<Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>, import("csstype").Property.Width<import("styled-system").TLengthStyledSystem>>, "width"> & {
        backgroundColor?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        color?: (string & import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>>) | undefined;
        display?: import("styled-system").ResponsiveValue<import("csstype").Property.Display, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        opacity?: import("styled-system").ResponsiveValue<import("csstype").Property.Opacity, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        translate?: "yes" | "no" | undefined;
        margin?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        padding?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        hidden?: boolean | undefined;
        children?: React.ReactNode;
        ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
        p?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        css?: import("@emotion/core").InterpolationWithTheme<any>;
        bg?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        m?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        ml?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mx?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        my?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pl?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        px?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        py?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        sx?: import("@styled-system/css").SystemStyleObject | undefined;
        align?: "left" | "right" | undefined;
    } & {
        theme?: any;
    }, "backgroundColor" | "color" | "display" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "opacity" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "translate" | "width" | "margin" | "padding" | "hidden" | "children" | "theme" | "p" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "bg" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "marginX" | "my" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "paddingX" | "py" | "paddingY" | "sx" | "align"> & React.RefAttributes<HTMLDivElement>>;
    Tabs: {
        ({ children, ...rest }: {
            backgroundColor?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            color?: (string & import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>>) | undefined;
            display?: import("styled-system").ResponsiveValue<import("csstype").Property.Display, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            opacity?: import("styled-system").ResponsiveValue<import("csstype").Property.Opacity, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            translate?: "yes" | "no" | undefined;
            margin?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            padding?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            hidden?: boolean | undefined;
            children?: React.ReactNode;
            ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
            p?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            slot?: string | undefined;
            style?: React.CSSProperties | undefined;
            title?: string | undefined;
            key?: React.Key | null | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            className?: string | undefined;
            contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            id?: string | undefined;
            lang?: string | undefined;
            placeholder?: string | undefined;
            spellCheck?: (boolean | "true" | "false") | undefined;
            tabIndex?: number | undefined;
            radioGroup?: string | undefined;
            role?: React.AriaRole | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            property?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: boolean | "true" | "false" | undefined;
            'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
            'aria-busy'?: boolean | "true" | "false" | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: boolean | "true" | "false" | undefined;
            'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: boolean | "true" | "false" | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: boolean | "true" | "false" | undefined;
            'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
            'aria-hidden'?: boolean | "true" | "false" | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: boolean | "true" | "false" | undefined;
            'aria-multiline'?: boolean | "true" | "false" | undefined;
            'aria-multiselectable'?: boolean | "true" | "false" | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: boolean | "true" | "false" | undefined;
            'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: boolean | "true" | "false" | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: boolean | "true" | "false" | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
            onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
            onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
            onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
            onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
            onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
            onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
            onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
            onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
            onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
            onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
            onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
            onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
            onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
            onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
            onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
            onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
            onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
            onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
            onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
            onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
            onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
            onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
            onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
            onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
            onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
            onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
            onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
            onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
            onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
            onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
            onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
            onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
            onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
            onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
            onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
            onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
            onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
            onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
            css?: import("@emotion/core").InterpolationWithTheme<any>;
            bg?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            m?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            ml?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mx?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            my?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pl?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            px?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            py?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            sx?: import("@styled-system/css").SystemStyleObject | undefined;
        } & {
            theme?: any;
        }): JSX.Element;
        displayName: string;
    };
    Tab: {
        ({ tabName, index, className, onClick, ...rest }: import("./SelectMenuTab").SelectMenuTabProps): JSX.Element;
        displayName: string;
    };
    TabPanel: {
        ({ tabName, className, children, ...rest }: import("./SelectMenuTabPanel").SelectMenuTabPanelProps): JSX.Element;
        displayName: string;
    };
    Header: {
        ({ children, theme, ...rest }: {
            lineHeight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            backgroundColor?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            color?: (string & import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>>) | undefined;
            display?: import("styled-system").ResponsiveValue<import("csstype").Property.Display, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            fontFamily?: import("styled-system").ResponsiveValue<import("csstype").Property.FontFamily, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            fontSize?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            fontStyle?: import("styled-system").ResponsiveValue<import("csstype").Property.FontStyle, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            fontWeight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            letterSpacing?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            opacity?: import("styled-system").ResponsiveValue<import("csstype").Property.Opacity, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            textAlign?: import("styled-system").ResponsiveValue<import("csstype").Property.TextAlign, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            translate?: "yes" | "no" | undefined;
            whiteSpace?: "normal" | "nowrap" | "pre" | "pre-wrap" | "pre-line" | undefined;
            margin?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            padding?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            hidden?: boolean | undefined;
            children?: React.ReactNode;
            ref?: ((instance: HTMLElement | null) => void) | React.RefObject<HTMLElement> | null | undefined;
            p?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            slot?: string | undefined;
            style?: React.CSSProperties | undefined;
            title?: string | undefined;
            key?: React.Key | null | undefined;
            defaultChecked?: boolean | undefined;
            defaultValue?: string | number | readonly string[] | undefined;
            suppressContentEditableWarning?: boolean | undefined;
            suppressHydrationWarning?: boolean | undefined;
            accessKey?: string | undefined;
            className?: string | undefined;
            contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
            contextMenu?: string | undefined;
            dir?: string | undefined;
            draggable?: (boolean | "true" | "false") | undefined;
            id?: string | undefined;
            lang?: string | undefined;
            placeholder?: string | undefined;
            spellCheck?: (boolean | "true" | "false") | undefined;
            tabIndex?: number | undefined;
            radioGroup?: string | undefined;
            role?: React.AriaRole | undefined;
            about?: string | undefined;
            datatype?: string | undefined;
            inlist?: any;
            prefix?: string | undefined;
            property?: string | undefined;
            resource?: string | undefined;
            typeof?: string | undefined;
            vocab?: string | undefined;
            autoCapitalize?: string | undefined;
            autoCorrect?: string | undefined;
            autoSave?: string | undefined;
            itemProp?: string | undefined;
            itemScope?: boolean | undefined;
            itemType?: string | undefined;
            itemID?: string | undefined;
            itemRef?: string | undefined;
            results?: number | undefined;
            security?: string | undefined;
            unselectable?: "on" | "off" | undefined;
            inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
            is?: string | undefined;
            'aria-activedescendant'?: string | undefined;
            'aria-atomic'?: boolean | "true" | "false" | undefined;
            'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
            'aria-busy'?: boolean | "true" | "false" | undefined;
            'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-colcount'?: number | undefined;
            'aria-colindex'?: number | undefined;
            'aria-colspan'?: number | undefined;
            'aria-controls'?: string | undefined;
            'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
            'aria-describedby'?: string | undefined;
            'aria-details'?: string | undefined;
            'aria-disabled'?: boolean | "true" | "false" | undefined;
            'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
            'aria-errormessage'?: string | undefined;
            'aria-expanded'?: boolean | "true" | "false" | undefined;
            'aria-flowto'?: string | undefined;
            'aria-grabbed'?: boolean | "true" | "false" | undefined;
            'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
            'aria-hidden'?: boolean | "true" | "false" | undefined;
            'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
            'aria-keyshortcuts'?: string | undefined;
            'aria-label'?: string | undefined;
            'aria-labelledby'?: string | undefined;
            'aria-level'?: number | undefined;
            'aria-live'?: "off" | "assertive" | "polite" | undefined;
            'aria-modal'?: boolean | "true" | "false" | undefined;
            'aria-multiline'?: boolean | "true" | "false" | undefined;
            'aria-multiselectable'?: boolean | "true" | "false" | undefined;
            'aria-orientation'?: "horizontal" | "vertical" | undefined;
            'aria-owns'?: string | undefined;
            'aria-placeholder'?: string | undefined;
            'aria-posinset'?: number | undefined;
            'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
            'aria-readonly'?: boolean | "true" | "false" | undefined;
            'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
            'aria-required'?: boolean | "true" | "false" | undefined;
            'aria-roledescription'?: string | undefined;
            'aria-rowcount'?: number | undefined;
            'aria-rowindex'?: number | undefined;
            'aria-rowspan'?: number | undefined;
            'aria-selected'?: boolean | "true" | "false" | undefined;
            'aria-setsize'?: number | undefined;
            'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
            'aria-valuemax'?: number | undefined;
            'aria-valuemin'?: number | undefined;
            'aria-valuenow'?: number | undefined;
            'aria-valuetext'?: string | undefined;
            dangerouslySetInnerHTML?: {
                __html: string;
            } | undefined;
            onCopy?: React.ClipboardEventHandler<HTMLElement> | undefined;
            onCopyCapture?: React.ClipboardEventHandler<HTMLElement> | undefined;
            onCut?: React.ClipboardEventHandler<HTMLElement> | undefined;
            onCutCapture?: React.ClipboardEventHandler<HTMLElement> | undefined;
            onPaste?: React.ClipboardEventHandler<HTMLElement> | undefined;
            onPasteCapture?: React.ClipboardEventHandler<HTMLElement> | undefined;
            onCompositionEnd?: React.CompositionEventHandler<HTMLElement> | undefined;
            onCompositionEndCapture?: React.CompositionEventHandler<HTMLElement> | undefined;
            onCompositionStart?: React.CompositionEventHandler<HTMLElement> | undefined;
            onCompositionStartCapture?: React.CompositionEventHandler<HTMLElement> | undefined;
            onCompositionUpdate?: React.CompositionEventHandler<HTMLElement> | undefined;
            onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLElement> | undefined;
            onFocus?: React.FocusEventHandler<HTMLElement> | undefined;
            onFocusCapture?: React.FocusEventHandler<HTMLElement> | undefined;
            onBlur?: React.FocusEventHandler<HTMLElement> | undefined;
            onBlurCapture?: React.FocusEventHandler<HTMLElement> | undefined;
            onChange?: React.FormEventHandler<HTMLElement> | undefined;
            onChangeCapture?: React.FormEventHandler<HTMLElement> | undefined;
            onBeforeInput?: React.FormEventHandler<HTMLElement> | undefined;
            onBeforeInputCapture?: React.FormEventHandler<HTMLElement> | undefined;
            onInput?: React.FormEventHandler<HTMLElement> | undefined;
            onInputCapture?: React.FormEventHandler<HTMLElement> | undefined;
            onReset?: React.FormEventHandler<HTMLElement> | undefined;
            onResetCapture?: React.FormEventHandler<HTMLElement> | undefined;
            onSubmit?: React.FormEventHandler<HTMLElement> | undefined;
            onSubmitCapture?: React.FormEventHandler<HTMLElement> | undefined;
            onInvalid?: React.FormEventHandler<HTMLElement> | undefined;
            onInvalidCapture?: React.FormEventHandler<HTMLElement> | undefined;
            onLoad?: React.ReactEventHandler<HTMLElement> | undefined;
            onLoadCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onError?: React.ReactEventHandler<HTMLElement> | undefined;
            onErrorCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onKeyDown?: React.KeyboardEventHandler<HTMLElement> | undefined;
            onKeyDownCapture?: React.KeyboardEventHandler<HTMLElement> | undefined;
            onKeyPress?: React.KeyboardEventHandler<HTMLElement> | undefined;
            onKeyPressCapture?: React.KeyboardEventHandler<HTMLElement> | undefined;
            onKeyUp?: React.KeyboardEventHandler<HTMLElement> | undefined;
            onKeyUpCapture?: React.KeyboardEventHandler<HTMLElement> | undefined;
            onAbort?: React.ReactEventHandler<HTMLElement> | undefined;
            onAbortCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onCanPlay?: React.ReactEventHandler<HTMLElement> | undefined;
            onCanPlayCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onCanPlayThrough?: React.ReactEventHandler<HTMLElement> | undefined;
            onCanPlayThroughCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onDurationChange?: React.ReactEventHandler<HTMLElement> | undefined;
            onDurationChangeCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onEmptied?: React.ReactEventHandler<HTMLElement> | undefined;
            onEmptiedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onEncrypted?: React.ReactEventHandler<HTMLElement> | undefined;
            onEncryptedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onEnded?: React.ReactEventHandler<HTMLElement> | undefined;
            onEndedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onLoadedData?: React.ReactEventHandler<HTMLElement> | undefined;
            onLoadedDataCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onLoadedMetadata?: React.ReactEventHandler<HTMLElement> | undefined;
            onLoadedMetadataCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onLoadStart?: React.ReactEventHandler<HTMLElement> | undefined;
            onLoadStartCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onPause?: React.ReactEventHandler<HTMLElement> | undefined;
            onPauseCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onPlay?: React.ReactEventHandler<HTMLElement> | undefined;
            onPlayCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onPlaying?: React.ReactEventHandler<HTMLElement> | undefined;
            onPlayingCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onProgress?: React.ReactEventHandler<HTMLElement> | undefined;
            onProgressCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onRateChange?: React.ReactEventHandler<HTMLElement> | undefined;
            onRateChangeCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onSeeked?: React.ReactEventHandler<HTMLElement> | undefined;
            onSeekedCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onSeeking?: React.ReactEventHandler<HTMLElement> | undefined;
            onSeekingCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onStalled?: React.ReactEventHandler<HTMLElement> | undefined;
            onStalledCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onSuspend?: React.ReactEventHandler<HTMLElement> | undefined;
            onSuspendCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onTimeUpdate?: React.ReactEventHandler<HTMLElement> | undefined;
            onTimeUpdateCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onVolumeChange?: React.ReactEventHandler<HTMLElement> | undefined;
            onVolumeChangeCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onWaiting?: React.ReactEventHandler<HTMLElement> | undefined;
            onWaitingCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onAuxClick?: React.MouseEventHandler<HTMLElement> | undefined;
            onAuxClickCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onClick?: React.MouseEventHandler<HTMLElement> | undefined;
            onClickCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onContextMenu?: React.MouseEventHandler<HTMLElement> | undefined;
            onContextMenuCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onDoubleClick?: React.MouseEventHandler<HTMLElement> | undefined;
            onDoubleClickCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onDrag?: React.DragEventHandler<HTMLElement> | undefined;
            onDragCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onDragEnd?: React.DragEventHandler<HTMLElement> | undefined;
            onDragEndCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onDragEnter?: React.DragEventHandler<HTMLElement> | undefined;
            onDragEnterCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onDragExit?: React.DragEventHandler<HTMLElement> | undefined;
            onDragExitCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onDragLeave?: React.DragEventHandler<HTMLElement> | undefined;
            onDragLeaveCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onDragOver?: React.DragEventHandler<HTMLElement> | undefined;
            onDragOverCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onDragStart?: React.DragEventHandler<HTMLElement> | undefined;
            onDragStartCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onDrop?: React.DragEventHandler<HTMLElement> | undefined;
            onDropCapture?: React.DragEventHandler<HTMLElement> | undefined;
            onMouseDown?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseDownCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseEnter?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseLeave?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseMove?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseMoveCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseOut?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseOutCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseOver?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseOverCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseUp?: React.MouseEventHandler<HTMLElement> | undefined;
            onMouseUpCapture?: React.MouseEventHandler<HTMLElement> | undefined;
            onSelect?: React.ReactEventHandler<HTMLElement> | undefined;
            onSelectCapture?: React.ReactEventHandler<HTMLElement> | undefined;
            onTouchCancel?: React.TouchEventHandler<HTMLElement> | undefined;
            onTouchCancelCapture?: React.TouchEventHandler<HTMLElement> | undefined;
            onTouchEnd?: React.TouchEventHandler<HTMLElement> | undefined;
            onTouchEndCapture?: React.TouchEventHandler<HTMLElement> | undefined;
            onTouchMove?: React.TouchEventHandler<HTMLElement> | undefined;
            onTouchMoveCapture?: React.TouchEventHandler<HTMLElement> | undefined;
            onTouchStart?: React.TouchEventHandler<HTMLElement> | undefined;
            onTouchStartCapture?: React.TouchEventHandler<HTMLElement> | undefined;
            onPointerDown?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerDownCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerMove?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerMoveCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerUp?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerUpCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerCancel?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerCancelCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerEnter?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerEnterCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerLeave?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerLeaveCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerOver?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerOverCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerOut?: React.PointerEventHandler<HTMLElement> | undefined;
            onPointerOutCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onGotPointerCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onLostPointerCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLElement> | undefined;
            onScroll?: React.UIEventHandler<HTMLElement> | undefined;
            onScrollCapture?: React.UIEventHandler<HTMLElement> | undefined;
            onWheel?: React.WheelEventHandler<HTMLElement> | undefined;
            onWheelCapture?: React.WheelEventHandler<HTMLElement> | undefined;
            onAnimationStart?: React.AnimationEventHandler<HTMLElement> | undefined;
            onAnimationStartCapture?: React.AnimationEventHandler<HTMLElement> | undefined;
            onAnimationEnd?: React.AnimationEventHandler<HTMLElement> | undefined;
            onAnimationEndCapture?: React.AnimationEventHandler<HTMLElement> | undefined;
            onAnimationIteration?: React.AnimationEventHandler<HTMLElement> | undefined;
            onAnimationIterationCapture?: React.AnimationEventHandler<HTMLElement> | undefined;
            onTransitionEnd?: React.TransitionEventHandler<HTMLElement> | undefined;
            onTransitionEndCapture?: React.TransitionEventHandler<HTMLElement> | undefined;
            css?: import("@emotion/core").InterpolationWithTheme<any>;
            bg?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            m?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            ml?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            mx?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            my?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            marginY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            pl?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            px?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            py?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            paddingY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
            sx?: import("@styled-system/css").SystemStyleObject | undefined;
        } & {
            theme?: any;
        }): JSX.Element;
        displayName: string;
    };
    LoadingAnimation: (props: {
        backgroundColor?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        color?: (string & import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>>) | undefined;
        display?: import("styled-system").ResponsiveValue<import("csstype").Property.Display, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        opacity?: import("styled-system").ResponsiveValue<import("csstype").Property.Opacity, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingBottom?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingLeft?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingRight?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingTop?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        translate?: "yes" | "no" | undefined;
        margin?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        padding?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        hidden?: boolean | undefined;
        children?: React.ReactNode;
        ref?: ((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined;
        p?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        slot?: string | undefined;
        style?: React.CSSProperties | undefined;
        title?: string | undefined;
        key?: React.Key | null | undefined;
        defaultChecked?: boolean | undefined;
        defaultValue?: string | number | readonly string[] | undefined;
        suppressContentEditableWarning?: boolean | undefined;
        suppressHydrationWarning?: boolean | undefined;
        accessKey?: string | undefined;
        className?: string | undefined;
        contentEditable?: "inherit" | (boolean | "true" | "false") | undefined;
        contextMenu?: string | undefined;
        dir?: string | undefined;
        draggable?: (boolean | "true" | "false") | undefined;
        id?: string | undefined;
        lang?: string | undefined;
        placeholder?: string | undefined;
        spellCheck?: (boolean | "true" | "false") | undefined;
        tabIndex?: number | undefined;
        radioGroup?: string | undefined;
        role?: React.AriaRole | undefined;
        about?: string | undefined;
        datatype?: string | undefined;
        inlist?: any;
        prefix?: string | undefined;
        property?: string | undefined;
        resource?: string | undefined;
        typeof?: string | undefined;
        vocab?: string | undefined;
        autoCapitalize?: string | undefined;
        autoCorrect?: string | undefined;
        autoSave?: string | undefined;
        itemProp?: string | undefined;
        itemScope?: boolean | undefined;
        itemType?: string | undefined;
        itemID?: string | undefined;
        itemRef?: string | undefined;
        results?: number | undefined;
        security?: string | undefined;
        unselectable?: "on" | "off" | undefined;
        inputMode?: "none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | undefined;
        is?: string | undefined;
        'aria-activedescendant'?: string | undefined;
        'aria-atomic'?: boolean | "true" | "false" | undefined;
        'aria-autocomplete'?: "none" | "list" | "inline" | "both" | undefined;
        'aria-busy'?: boolean | "true" | "false" | undefined;
        'aria-checked'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-colcount'?: number | undefined;
        'aria-colindex'?: number | undefined;
        'aria-colspan'?: number | undefined;
        'aria-controls'?: string | undefined;
        'aria-current'?: boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | undefined;
        'aria-describedby'?: string | undefined;
        'aria-details'?: string | undefined;
        'aria-disabled'?: boolean | "true" | "false" | undefined;
        'aria-dropeffect'?: "none" | "link" | "copy" | "execute" | "move" | "popup" | undefined;
        'aria-errormessage'?: string | undefined;
        'aria-expanded'?: boolean | "true" | "false" | undefined;
        'aria-flowto'?: string | undefined;
        'aria-grabbed'?: boolean | "true" | "false" | undefined;
        'aria-haspopup'?: boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | undefined;
        'aria-hidden'?: boolean | "true" | "false" | undefined;
        'aria-invalid'?: boolean | "true" | "false" | "grammar" | "spelling" | undefined;
        'aria-keyshortcuts'?: string | undefined;
        'aria-label'?: string | undefined;
        'aria-labelledby'?: string | undefined;
        'aria-level'?: number | undefined;
        'aria-live'?: "off" | "assertive" | "polite" | undefined;
        'aria-modal'?: boolean | "true" | "false" | undefined;
        'aria-multiline'?: boolean | "true" | "false" | undefined;
        'aria-multiselectable'?: boolean | "true" | "false" | undefined;
        'aria-orientation'?: "horizontal" | "vertical" | undefined;
        'aria-owns'?: string | undefined;
        'aria-placeholder'?: string | undefined;
        'aria-posinset'?: number | undefined;
        'aria-pressed'?: boolean | "true" | "false" | "mixed" | undefined;
        'aria-readonly'?: boolean | "true" | "false" | undefined;
        'aria-relevant'?: "all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | undefined;
        'aria-required'?: boolean | "true" | "false" | undefined;
        'aria-roledescription'?: string | undefined;
        'aria-rowcount'?: number | undefined;
        'aria-rowindex'?: number | undefined;
        'aria-rowspan'?: number | undefined;
        'aria-selected'?: boolean | "true" | "false" | undefined;
        'aria-setsize'?: number | undefined;
        'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
        'aria-valuemax'?: number | undefined;
        'aria-valuemin'?: number | undefined;
        'aria-valuenow'?: number | undefined;
        'aria-valuetext'?: string | undefined;
        dangerouslySetInnerHTML?: {
            __html: string;
        } | undefined;
        onCopy?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCopyCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCut?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCutCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPaste?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onPasteCapture?: React.ClipboardEventHandler<HTMLDivElement> | undefined;
        onCompositionEnd?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionEndCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStart?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionStartCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdate?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onCompositionUpdateCapture?: React.CompositionEventHandler<HTMLDivElement> | undefined;
        onFocus?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onFocusCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlur?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onBlurCapture?: React.FocusEventHandler<HTMLDivElement> | undefined;
        onChange?: React.FormEventHandler<HTMLDivElement> | undefined;
        onChangeCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onBeforeInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInput?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInputCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onReset?: React.FormEventHandler<HTMLDivElement> | undefined;
        onResetCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmit?: React.FormEventHandler<HTMLDivElement> | undefined;
        onSubmitCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalid?: React.FormEventHandler<HTMLDivElement> | undefined;
        onInvalidCapture?: React.FormEventHandler<HTMLDivElement> | undefined;
        onLoad?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onError?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onErrorCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onKeyDown?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyDownCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPress?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyPressCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUp?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onKeyUpCapture?: React.KeyboardEventHandler<HTMLDivElement> | undefined;
        onAbort?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAbortCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThrough?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onCanPlayThroughCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onDurationChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptied?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEmptiedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncrypted?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEncryptedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEnded?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onEndedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedData?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedDataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadata?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadedMetadataCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStart?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onLoadStartCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPause?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPauseCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlay?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlaying?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onPlayingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgress?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onProgressCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onRateChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeked?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekedCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeeking?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSeekingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalled?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onStalledCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspend?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSuspendCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdate?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTimeUpdateCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChange?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onVolumeChangeCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaiting?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onWaitingCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onAuxClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onAuxClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenu?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onContextMenuCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClick?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDoubleClickCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onDrag?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnd?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEndCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnter?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragEnterCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExit?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragExitCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeave?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragLeaveCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOver?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragOverCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStart?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDragStartCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDrop?: React.DragEventHandler<HTMLDivElement> | undefined;
        onDropCapture?: React.DragEventHandler<HTMLDivElement> | undefined;
        onMouseDown?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseDownCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseEnter?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseLeave?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMove?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseMoveCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOut?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOutCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOver?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseOverCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUp?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onMouseUpCapture?: React.MouseEventHandler<HTMLDivElement> | undefined;
        onSelect?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onSelectCapture?: React.ReactEventHandler<HTMLDivElement> | undefined;
        onTouchCancel?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchCancelCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEnd?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchEndCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMove?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchMoveCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStart?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onTouchStartCapture?: React.TouchEventHandler<HTMLDivElement> | undefined;
        onPointerDown?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerDownCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMove?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerMoveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUp?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerUpCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancel?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerCancelCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnter?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerEnterCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeave?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerLeaveCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOver?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOverCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOut?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onPointerOutCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onGotPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onLostPointerCaptureCapture?: React.PointerEventHandler<HTMLDivElement> | undefined;
        onScroll?: React.UIEventHandler<HTMLDivElement> | undefined;
        onScrollCapture?: React.UIEventHandler<HTMLDivElement> | undefined;
        onWheel?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onWheelCapture?: React.WheelEventHandler<HTMLDivElement> | undefined;
        onAnimationStart?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationStartCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEnd?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationEndCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIteration?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onAnimationIterationCapture?: React.AnimationEventHandler<HTMLDivElement> | undefined;
        onTransitionEnd?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        onTransitionEndCapture?: React.TransitionEventHandler<HTMLDivElement> | undefined;
        css?: import("@emotion/core").InterpolationWithTheme<any>;
        bg?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        m?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        ml?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        mx?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        my?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        marginY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pt?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pr?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pb?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        pl?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        px?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingX?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        py?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
        paddingY?: import("styled-system").ResponsiveValue<string | number | symbol, Required<import("styled-system").Theme<import("styled-system").TLengthStyledSystem>>> | undefined;
    } & {
        theme?: any;
    }) => JSX.Element;
};
export default _default;
