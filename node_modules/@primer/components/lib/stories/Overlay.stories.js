"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DialogOverlay = exports.DropdownOverlay = exports.default = void 0;

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ = require("..");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

var _default = {
  title: 'Internal components/Overlay',
  component: _.Overlay,
  decorators: [Story => {
    return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, null, /*#__PURE__*/_react.default.createElement(_.BaseStyles, null, /*#__PURE__*/_react.default.createElement(Story, null)));
  }]
};
exports.default = _default;

const DummyItem = _styledComponents.default.button.withConfig({
  displayName: "Overlaystories__DummyItem",
  componentId: "sc-92ppmu-0"
})(["border-radius:6px;font-weight:400;padding:6px 8px;font-weight:400;text-align:left;margin:0;font-size:14px;background:none;border:none;&:hover{background:#f0f3f5;}&:focus{background:red;}"]);

const DropdownOverlay = () => {
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  const buttonRef = (0, _react.useRef)(null);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_.Button, {
    ref: buttonRef,
    sx: {
      position: 'relative'
    },
    onClick: () => setIsOpen(!isOpen)
  }, "open overlay"), isOpen ? /*#__PURE__*/_react.default.createElement(_.Overlay, {
    returnFocusRef: buttonRef,
    height: "auto",
    width: "sm",
    ignoreClickRefs: [buttonRef],
    onEscape: () => setIsOpen(false),
    onClickOutside: () => setIsOpen(false)
  }, /*#__PURE__*/_react.default.createElement(_.Flex, {
    flexDirection: "column",
    p: 2
  }, /*#__PURE__*/_react.default.createElement(DummyItem, null, "Copy link"), /*#__PURE__*/_react.default.createElement(DummyItem, null, "Quote reply"), /*#__PURE__*/_react.default.createElement(DummyItem, null, "Reference in new issue"), /*#__PURE__*/_react.default.createElement(DummyItem, null, "Edit"), /*#__PURE__*/_react.default.createElement(DummyItem, null, "Delete"))) : null);
};

exports.DropdownOverlay = DropdownOverlay;

const DialogOverlay = () => {
  const [isOpen, setIsOpen] = (0, _react.useState)(false);
  const buttonRef = (0, _react.useRef)(null);
  const confirmButtonRef = (0, _react.useRef)(null);
  const anchorRef = (0, _react.useRef)(null);

  const closeOverlay = () => setIsOpen(false);

  return /*#__PURE__*/_react.default.createElement(_.Position, {
    position: "absolute",
    top: 0,
    left: 0,
    bottom: 0,
    right: 0,
    ref: anchorRef
  }, /*#__PURE__*/_react.default.createElement(_.Button, {
    ref: buttonRef,
    onClick: () => setIsOpen(!isOpen)
  }, "open overlay"), isOpen ? /*#__PURE__*/_react.default.createElement(_.Overlay, {
    initialFocusRef: confirmButtonRef,
    returnFocusRef: buttonRef,
    ignoreClickRefs: [buttonRef],
    onEscape: closeOverlay,
    onClickOutside: closeOverlay,
    width: "sm"
  }, /*#__PURE__*/_react.default.createElement(_.Flex, {
    flexDirection: "column",
    p: 2
  }, /*#__PURE__*/_react.default.createElement(_.Text, null, "Are you sure?"), /*#__PURE__*/_react.default.createElement(_.ButtonDanger, {
    onClick: closeOverlay
  }, "Cancel"), /*#__PURE__*/_react.default.createElement(_.Button, {
    onClick: closeOverlay,
    ref: confirmButtonRef
  }, "Confirm"))) : null);
};

exports.DialogOverlay = DialogOverlay;
DialogOverlay.displayName = "DialogOverlay";