"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Nested = exports.Default = exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _ = require("..");

var _styledComponents = require("styled-components");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = {
  title: 'Generic behaviors/ThemeProvider',
  component: _.ThemeProvider,
  argTypes: {
    theme: {
      table: {
        disable: true
      }
    }
  }
};
exports.default = _default;
const GlobalStyle = (0, _styledComponents.createGlobalStyle)`
    body {
        background-color: ${(0, _.themeGet)('colors.bg.canvas')};
    }
`;

function ActiveColorScheme() {
  const {
    colorScheme
  } = (0, _.useTheme)();
  return /*#__PURE__*/_react.default.createElement("span", null, "Active color scheme: ", colorScheme);
}

ActiveColorScheme.displayName = "ActiveColorScheme";

const Default = args => {
  return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, args, /*#__PURE__*/_react.default.createElement(GlobalStyle, null), /*#__PURE__*/_react.default.createElement(_.BaseStyles, null, /*#__PURE__*/_react.default.createElement(ActiveColorScheme, null)));
};

exports.Default = Default;
Default.displayName = "Default";
Default.args = {
  colorMode: 'day',
  dayScheme: 'light',
  nightScheme: 'dark'
};

function NightMode() {
  return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, {
    colorMode: "night"
  }, /*#__PURE__*/_react.default.createElement(_.BorderBox, {
    my: 3,
    p: 3,
    color: "text.primary",
    bg: "bg.canvas"
  }, "Always night mode (", /*#__PURE__*/_react.default.createElement(ActiveColorScheme, null), ")"));
}

NightMode.displayName = "NightMode";

function InverseMode() {
  const {
    resolvedColorMode
  } = (0, _.useTheme)();
  return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, {
    colorMode: resolvedColorMode === 'day' ? 'night' : 'day'
  }, /*#__PURE__*/_react.default.createElement(_.BorderBox, {
    my: 3,
    p: 3,
    color: "text.primary",
    bg: "bg.canvas"
  }, "Always inverse of parent mode (", /*#__PURE__*/_react.default.createElement(ActiveColorScheme, null), ")"));
}

InverseMode.displayName = "InverseMode";

const Nested = args => {
  return /*#__PURE__*/_react.default.createElement(_.ThemeProvider, args, /*#__PURE__*/_react.default.createElement(GlobalStyle, null), /*#__PURE__*/_react.default.createElement(_.BaseStyles, null, /*#__PURE__*/_react.default.createElement(ActiveColorScheme, null), /*#__PURE__*/_react.default.createElement(NightMode, null), /*#__PURE__*/_react.default.createElement(InverseMode, null)));
};

exports.Nested = Nested;
Nested.displayName = "Nested";
Nested.args = {
  colorMode: 'day',
  dayScheme: 'light',
  nightScheme: 'dark_dimmed'
};