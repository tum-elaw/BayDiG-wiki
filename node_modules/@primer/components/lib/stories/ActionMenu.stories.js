"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionsStory = ActionsStory;
exports.SimpleListStory = SimpleListStory;
exports.ExternalOpenState = ExternalOpenState;
exports.ComplexListStory = ComplexListStory;
exports.CustomTrigger = CustomTrigger;
exports.default = void 0;

var _octiconsReact = require("@primer/octicons-react");

var _react = _interopRequireWildcard(require("react"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _ = require("..");

var _ActionMenu = require("../ActionMenu");

var _Link = _interopRequireDefault(require("../Link"));

var _Button = _interopRequireDefault(require("../Button"));

var _ActionList = require("../ActionList");

var _BaseStyles = _interopRequireDefault(require("../BaseStyles"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const meta = {
  title: 'Composite components/ActionMenu',
  component: _ActionMenu.ActionMenu,
  decorators: [Story => /*#__PURE__*/_react.default.createElement(_.ThemeProvider, null, /*#__PURE__*/_react.default.createElement(_BaseStyles.default, null, /*#__PURE__*/_react.default.createElement(Story, null)))],
  parameters: {
    controls: {
      disabled: true
    }
  }
};
var _default = meta;
exports.default = _default;

const ErsatzOverlay = _styledComponents.default.div.withConfig({
  displayName: "ActionMenustories__ErsatzOverlay",
  componentId: "sc-1bfovxa-0"
})(["border-radius:12px;box-shadow:0 1px 3px rgba(0,0,0,0.12),0 8px 24px rgba(149,157,165,0.2);padding:8px;"]);

function ActionsStory() {
  const [option, setOption] = (0, _react.useState)('Select an option');

  const onAction = itemProps => {
    var _itemProps$text;

    setOption((_itemProps$text = itemProps.text) !== null && _itemProps$text !== void 0 ? _itemProps$text : '');
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, "Actions"), /*#__PURE__*/_react.default.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/_react.default.createElement(ErsatzOverlay, null, /*#__PURE__*/_react.default.createElement(_ActionMenu.ActionMenu, {
    onAction: onAction,
    anchorContent: /*#__PURE__*/_react.default.createElement(_octiconsReact.ServerIcon, null),
    items: [{
      leadingVisual: _octiconsReact.ServerIcon,
      text: 'Open current Codespace',
      description: "Your existing Codespace will be opened to its previous state, and you'll be asked to manually switch to new-branch.",
      descriptionVariant: 'block',
      trailingText: '⌘O'
    }, {
      leadingVisual: _octiconsReact.PlusCircleIcon,
      text: 'Create new Codespace',
      description: 'Create a brand new Codespace with a fresh image and checkout this branch.',
      descriptionVariant: 'block',
      trailingText: '⌘C'
    }]
  })));
}

ActionsStory.storyName = 'Actions';

function SimpleListStory() {
  const [option, setOption] = (0, _react.useState)('Select an option');

  const onAction = itemProps => {
    setOption(itemProps.text || '');
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, "Simple List"), /*#__PURE__*/_react.default.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/_react.default.createElement(ErsatzOverlay, null, /*#__PURE__*/_react.default.createElement(_ActionMenu.ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    overlayProps: {
      onMouseDown: e => // eslint-disable-next-line no-console
      console.log('onMouseDown in the internal Overlay can be useful for controlling event interactions', e)
    },
    items: [{
      text: 'New file',
      trailingText: '⌘O',
      disabled: true,
      leadingVisual: _octiconsReact.ProjectIcon
    }, _ActionList.ActionList.Divider, {
      text: 'Copy link',
      trailingText: 'ctrl+C'
    }, {
      text: 'Edit file',
      trailingText: '⌘E'
    }, {
      text: 'Delete file',
      variant: 'danger',
      trailingText: '⌘D'
    }]
  })));
}

SimpleListStory.storyName = 'Simple List';

function ExternalOpenState() {
  const [option, setOption] = (0, _react.useState)('Select an option');
  const [open, setOpen] = (0, _react.useState)(false);

  const onAction = itemProps => {
    setOption(itemProps.text);
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, "Simple List"), /*#__PURE__*/_react.default.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/_react.default.createElement("h2", null, "External Open State: ", open ? 'Open' : 'Closed'), /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_Button.default, {
    onClick: () => setOpen(!open)
  }, "Toggle External State")), /*#__PURE__*/_react.default.createElement("br", null), /*#__PURE__*/_react.default.createElement(ErsatzOverlay, null, /*#__PURE__*/_react.default.createElement(_ActionMenu.ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    open: open,
    setOpen: setOpen,
    items: [{
      text: 'New file',
      trailingText: '⌘O',
      disabled: true,
      leadingVisual: _octiconsReact.ProjectIcon
    }, _ActionList.ActionList.Divider, {
      text: 'Copy link',
      trailingText: 'ctrl+C'
    }, {
      text: 'Edit file',
      trailingText: '⌘E'
    }, {
      text: 'Delete file',
      variant: 'danger',
      trailingText: '⌘D'
    }]
  })));
}

ExternalOpenState.storyName = 'External Open State';

function ComplexListStory() {
  const [option, setOption] = (0, _react.useState)('Select an option');

  const onAction = itemProps => {
    setOption(itemProps.text || '');
  };

  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, "Complex List"), /*#__PURE__*/_react.default.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/_react.default.createElement(ErsatzOverlay, null, /*#__PURE__*/_react.default.createElement(_ActionMenu.ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    groupMetadata: [{
      groupId: '0'
    }, {
      groupId: '1',
      header: {
        title: 'Live query',
        variant: 'subtle'
      }
    }, {
      groupId: '2',
      header: {
        title: 'Layout',
        variant: 'subtle'
      }
    }, {
      groupId: '3',
      renderItem: props => /*#__PURE__*/_react.default.createElement(_ActionList.ActionList.Item, _extends({
        style: {
          fontWeight: 'bold'
        }
      }, props))
    }, {
      groupId: '4'
    }],
    items: [{
      leadingVisual: _octiconsReact.TypographyIcon,
      text: 'Rename',
      groupId: '0'
    }, {
      leadingVisual: _octiconsReact.VersionsIcon,
      text: 'Duplicate',
      groupId: '0'
    }, {
      leadingVisual: _octiconsReact.SearchIcon,
      text: 'repo:github/github',
      groupId: '1',
      renderItem: props => /*#__PURE__*/_react.default.createElement(_ActionList.ActionList.Item, _extends({
        style: {
          color: 'rebeccapurple'
        }
      }, props)),
      trailingText: '⌘S',
      trailingIcon: _octiconsReact.ArrowRightIcon
    }, {
      leadingVisual: _octiconsReact.NoteIcon,
      text: 'Table',
      description: 'Information-dense table optimized for operations across teams',
      descriptionVariant: 'block',
      groupId: '2'
    }, {
      leadingVisual: _octiconsReact.ProjectIcon,
      text: 'Board',
      description: 'Kanban-style board focused on visual states',
      descriptionVariant: 'block',
      groupId: '2'
    }, {
      leadingVisual: _octiconsReact.FilterIcon,
      text: 'Save sort and filters to current view',
      groupId: '3'
    }, {
      leadingVisual: _octiconsReact.FilterIcon,
      text: 'Save sort and filters to new view',
      groupId: '3'
    }, {
      leadingVisual: _octiconsReact.GearIcon,
      text: 'View settings',
      groupId: '4'
    }]
  })));
}

ComplexListStory.storyName = 'Complex List';

function CustomTrigger() {
  const customAnchor = props => /*#__PURE__*/_react.default.createElement(_Link.default, _extends({}, props, {
    sx: {
      cursor: 'pointer'
    }
  }));

  const [option, setOption] = (0, _react.useState)('Select an option');
  const onAction = (0, _react.useCallback)(itemProps => {
    setOption(itemProps.text || '');
  }, []);
  return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement("h1", null, "Custom Trigger"), /*#__PURE__*/_react.default.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/_react.default.createElement(ErsatzOverlay, null, /*#__PURE__*/_react.default.createElement(_ActionMenu.ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    renderAnchor: customAnchor,
    items: [{
      text: 'New file'
    }, _ActionList.ActionList.Divider, {
      text: 'Copy link'
    }, {
      text: 'Edit file'
    }, {
      text: 'Delete file',
      variant: 'danger'
    }]
  })));
}

CustomTrigger.storyName = 'Custom Trigger';