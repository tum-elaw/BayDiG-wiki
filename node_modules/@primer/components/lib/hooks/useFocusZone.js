"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useFocusZone = useFocusZone;

var _react = _interopRequireWildcard(require("react"));

var _focusZone = require("../behaviors/focusZone");

var _useProvidedRefOrCreate = require("./useProvidedRefOrCreate");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function useFocusZone(settings = {}, dependencies = []) {
  const containerRef = (0, _useProvidedRefOrCreate.useProvidedRefOrCreate)(settings.containerRef);
  const useActiveDescendant = !!settings.activeDescendantFocus;
  const passedActiveDescendantRef = typeof settings.activeDescendantFocus === 'boolean' || !settings.activeDescendantFocus ? undefined : settings.activeDescendantFocus;
  const activeDescendantControlRef = (0, _useProvidedRefOrCreate.useProvidedRefOrCreate)(passedActiveDescendantRef);
  const disabled = settings.disabled;

  const abortController = _react.default.useRef();

  (0, _react.useEffect)(() => {
    if (containerRef.current instanceof HTMLElement && (!useActiveDescendant || activeDescendantControlRef.current instanceof HTMLElement)) {
      if (!disabled) {
        var _activeDescendantCont;

        const vanillaSettings = { ...settings,
          activeDescendantControl: (_activeDescendantCont = activeDescendantControlRef.current) !== null && _activeDescendantCont !== void 0 ? _activeDescendantCont : undefined
        };
        abortController.current = (0, _focusZone.focusZone)(containerRef.current, vanillaSettings);
        return () => {
          var _abortController$curr;

          (_abortController$curr = abortController.current) === null || _abortController$curr === void 0 ? void 0 : _abortController$curr.abort();
        };
      } else {
        var _abortController$curr2;

        (_abortController$curr2 = abortController.current) === null || _abortController$curr2 === void 0 ? void 0 : _abortController$curr2.abort();
      }
    }
  }, // eslint-disable-next-line react-hooks/exhaustive-deps
  [disabled, ...dependencies]);
  return {
    containerRef,
    activeDescendantControlRef
  };
}