"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GRID = exports.FLEX = exports.POSITION = exports.LAYOUT = exports.BORDER = exports.TYPOGRAPHY = exports.COMMON = exports.get = void 0;

var _themeGet = require("@styled-system/theme-get");

var styledSystem = _interopRequireWildcard(require("styled-system"));

var _theme = _interopRequireDefault(require("./theme"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

// eslint-disable-next-line import/no-namespace
const {
  get: getKey,
  compose,
  system
} = styledSystem;

const get = key => (0, _themeGet.themeGet)(key, getKey(_theme.default, key)); // Common props


exports.get = get;
const COMMON = compose(styledSystem.space, styledSystem.color, styledSystem.display);
exports.COMMON = COMMON;
// Typography props
const whiteSpace = system({
  whiteSpace: {
    property: 'whiteSpace' // cssProperty: 'whiteSpace',

  }
});
const TYPOGRAPHY = compose(styledSystem.typography, whiteSpace);
exports.TYPOGRAPHY = TYPOGRAPHY;
// Border props
const BORDER = compose(styledSystem.border, styledSystem.shadow);
exports.BORDER = BORDER;
// Layout props
const LAYOUT = styledSystem.layout;
exports.LAYOUT = LAYOUT;
// Position props
const POSITION = styledSystem.position;
exports.POSITION = POSITION;
// Flex props
const FLEX = styledSystem.flexbox;
exports.FLEX = FLEX;
// Grid props
const GRID = styledSystem.grid;
exports.GRID = GRID;