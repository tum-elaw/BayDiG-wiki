"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ActionMenu = void 0;

var _List = require("./ActionList/List");

var _Item = require("./ActionList/Item");

var _Divider = require("./ActionList/Divider");

var _Button = _interopRequireDefault(require("./Button"));

var _react = _interopRequireWildcard(require("react"));

var _AnchoredOverlay = require("./AnchoredOverlay");

var _useProvidedStateOrCreate = require("./hooks/useProvidedStateOrCreate");

var _hooks = require("./hooks");

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function (nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const ActionMenuItem = props => /*#__PURE__*/_react.default.createElement(_Item.Item, _extends({
  role: "menuitem"
}, props));

ActionMenuItem.displayName = "ActionMenuItem";
ActionMenuItem.displayName = 'ActionMenu.Item';

const ActionMenuBase = ({
  anchorContent,
  renderAnchor = props => /*#__PURE__*/_react.default.createElement(_Button.default, props),
  anchorRef: externalAnchorRef,
  onAction,
  open,
  setOpen,
  overlayProps,
  items,
  ...listProps
}) => {
  const [combinedOpenState, setCombinedOpenState] = (0, _useProvidedStateOrCreate.useProvidedStateOrCreate)(open, setOpen, false);
  const anchorRef = (0, _hooks.useProvidedRefOrCreate)(externalAnchorRef);
  const onOpen = (0, _react.useCallback)(() => setCombinedOpenState(true), [setCombinedOpenState]);
  const onClose = (0, _react.useCallback)(() => setCombinedOpenState(false), [setCombinedOpenState]);
  const renderMenuAnchor = (0, _react.useMemo)(() => {
    if (renderAnchor === null) {
      return null;
    }

    return props => {
      return renderAnchor({
        'aria-label': 'menu',
        children: anchorContent,
        ...props
      });
    };
  }, [anchorContent, renderAnchor]);
  const itemsToRender = (0, _react.useMemo)(() => {
    return items.map(item => {
      return { ...item,
        role: 'menuitem',
        onAction: (props, event) => {
          var _item$onAction;

          const actionCallback = (_item$onAction = item.onAction) !== null && _item$onAction !== void 0 ? _item$onAction : onAction;
          actionCallback === null || actionCallback === void 0 ? void 0 : actionCallback(props, event);

          if (!event.defaultPrevented) {
            onClose();
          }
        }
      };
    });
  }, [items, onAction, onClose]);
  return /*#__PURE__*/_react.default.createElement(_AnchoredOverlay.AnchoredOverlay, {
    renderAnchor: renderMenuAnchor,
    anchorRef: anchorRef,
    open: combinedOpenState,
    onOpen: onOpen,
    onClose: onClose,
    overlayProps: overlayProps
  }, /*#__PURE__*/_react.default.createElement(_List.List, _extends({}, listProps, {
    role: "menu",
    items: itemsToRender
  })));
};

ActionMenuBase.displayName = "ActionMenuBase";
ActionMenuBase.displayName = 'ActionMenu';
const ActionMenu = Object.assign(ActionMenuBase, {
  Divider: _Divider.Divider,
  Item: ActionMenuItem
});
exports.ActionMenu = ActionMenu;