"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _react = _interopRequireWildcard(require("react"));

var _constants = require("./constants");

var _hooks = require("./hooks");

var _Portal = _interopRequireDefault(require("./Portal"));

var _sx = _interopRequireDefault(require("./sx"));

var _useCombinedRefs = require("./hooks/useCombinedRefs");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

const heightMap = {
  sm: '480px',
  md: '640px',
  auto: 'auto'
};
const widthMap = {
  sm: '256px',
  md: '320px',
  lg: '480px',
  xl: '640px',
  auto: 'auto'
};
/*TODO replace with shadow functional color variable when it's shipped to primer/primitives*/

const StyledOverlay = _styledComponents.default.div.withConfig({
  displayName: "Overlay__StyledOverlay",
  componentId: "jhwkzw-0"
})(["background-color:", ";box-shadow:0px 1px 3px rgba(0,0,0,0.12),0px 8px 24px rgba(149,157,165,0.2);position:absolute;min-width:192px;max-width:640px;height:", ";width:", ";border-radius:12px;animation:overlay-appear 200ms ", ";@keyframes overlay-appear{0%{opacity:0;transform:translateY(", ");}100%{opacity:1;}}visibility:", ";", ";", ";", ";"], (0, _constants.get)('colors.bg.overlay'), props => heightMap[props.height || 'auto'], props => widthMap[props.width || 'auto'], (0, _constants.get)('animation.easeOutCubic'), (0, _constants.get)('space.2'), props => props.visibility || 'visible', _constants.COMMON, _constants.POSITION, _sx.default);

/**
 * An `Overlay` is a flexible floating surface, used to display transient content such as menus,
 * selection options, dialogs, and more. Overlays use shadows to express elevation. The `Overlay`
 * component handles all behaviors needed by overlay UIs as well as the common styles that all overlays * should have.
 * @param ignoreClickRefs Optional. An array of ref objects to ignore clicks on in the `onOutsideClick` behavior. This is often used to ignore clicking on the element that toggles the open/closed state for the `Overlay` to prevent the `Overlay` from being toggled twice.
 * @param initialFocusRef Optional. Ref for the element to focus when the `Overlay` is opened. If nothing is provided, the first focusable element in the `Overlay` body is focused.
 * @param returnFocusRef Required. Ref for the element to focus when the `Overlay` is closed.
 * @param onClickOutside  Required. Function to call when clicking outside of the `Overlay`. Typically this function sets the `Overlay` visibility state to `false`.
 * @param onEscape Required. Function to call when user presses `Escape`. Typically this function sets the `Overlay` visibility state to `false`.
 * @param width Sets the width of the `Overlay`, pick from our set list of widths, or pass `auto` to automatically set the width based on the content of the `Overlay`. `sm` corresponds to `256px`, `md` corresponds to `320px`, `lg` corresponds to `480px`, and `xl` corresponds to `640px`.
 * @param height Sets the height of the `Overlay`, pick from our set list of heights, or pass `auto` to automatically set the height based on the content of the `Overlay`. `sm` corresponds to `480px` and `md` corresponds to `640px`.
 * @param visibility Sets the visibility of the `Overlay`
 */
const Overlay = _react.default.forwardRef(({
  onClickOutside,
  role = 'dialog',
  initialFocusRef,
  returnFocusRef,
  ignoreClickRefs,
  onEscape,
  visibility,
  ...rest
}, forwardedRef) => {
  const overlayRef = (0, _react.useRef)(null);
  const combinedRef = (0, _useCombinedRefs.useCombinedRefs)(overlayRef, forwardedRef);
  const overlayProps = (0, _hooks.useOverlay)({
    overlayRef,
    returnFocusRef,
    onEscape,
    ignoreClickRefs,
    onClickOutside,
    initialFocusRef
  });
  return /*#__PURE__*/_react.default.createElement(_Portal.default, null, /*#__PURE__*/_react.default.createElement(StyledOverlay, _extends({}, overlayProps, {
    "aria-modal": "true",
    role: role
  }, rest, {
    ref: combinedRef,
    visibility: visibility
  })));
});

Overlay.defaultProps = {
  height: 'auto',
  width: 'auto'
};
var _default = Overlay;
exports.default = _default;