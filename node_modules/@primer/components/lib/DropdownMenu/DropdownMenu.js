"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DropdownMenu = DropdownMenu;

var _react = _interopRequireWildcard(require("react"));

var _List = require("../ActionList/List");

var _DropdownButton = require("./DropdownButton");

var _AnchoredOverlay = require("../AnchoredOverlay");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function () { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 * A `DropdownMenu` provides an anchor (button by default) that will open a floating menu of selectable items.  The menu can be
 * opened and navigated using keyboard or mouse.  When an item is selected, the menu will close and the `onChange` callback will be called.
 * If the default anchor button is used, the anchor contents will be updated with the selection.
 */
function DropdownMenu({
  renderAnchor = props => /*#__PURE__*/_react.default.createElement(_DropdownButton.DropdownButton, props),
  placeholder,
  selectedItem,
  onChange,
  overlayProps,
  items,
  ...listProps
}) {
  const [open, setOpen] = (0, _react.useState)(false);
  const onOpen = (0, _react.useCallback)(() => setOpen(true), []);
  const onClose = (0, _react.useCallback)(() => setOpen(false), []);
  const renderMenuAnchor = (0, _react.useCallback)(props => {
    var _selectedItem$text;

    return renderAnchor({ ...props,
      children: (_selectedItem$text = selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.text) !== null && _selectedItem$text !== void 0 ? _selectedItem$text : placeholder
    });
  }, [placeholder, renderAnchor, selectedItem === null || selectedItem === void 0 ? void 0 : selectedItem.text]);
  const itemsToRender = (0, _react.useMemo)(() => {
    return items.map(item => {
      return { ...item,
        role: 'option',
        selected: item === selectedItem,
        onAction: (itemFromAction, event) => {
          var _item$onAction;

          (_item$onAction = item.onAction) === null || _item$onAction === void 0 ? void 0 : _item$onAction.call(item, itemFromAction, event);

          if (event.defaultPrevented) {
            return;
          }

          onClose();
          onChange === null || onChange === void 0 ? void 0 : onChange(item === selectedItem ? undefined : item);
        }
      };
    });
  }, [items, onChange, onClose, selectedItem]);
  return /*#__PURE__*/_react.default.createElement(_AnchoredOverlay.AnchoredOverlay, {
    renderAnchor: renderMenuAnchor,
    open: open,
    onOpen: onOpen,
    onClose: onClose,
    overlayProps: overlayProps
  }, /*#__PURE__*/_react.default.createElement(_List.List, _extends({}, listProps, {
    role: "listbox",
    items: itemsToRender
  })));
}

DropdownMenu.displayName = "DropdownMenu";
DropdownMenu.displayName = 'DropdownMenu';