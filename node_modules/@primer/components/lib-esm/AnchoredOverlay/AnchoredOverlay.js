function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useMemo, useRef } from 'react';
import Overlay from '../Overlay';
import { useFocusTrap } from '../hooks/useFocusTrap';
import { useFocusZone } from '../hooks/useFocusZone';
import { useAnchoredPosition, useRenderForcingRef } from '../hooks';
import { uniqueId } from '../utils/uniqueId';

/**
 * An `AnchoredOverlay` provides an anchor that will open a floating overlay positioned relative to the anchor.
 * The overlay can be opened and navigated using keyboard or mouse.
 */
export const AnchoredOverlay = ({
  renderAnchor,
  children,
  open,
  onOpen,
  onClose,
  height,
  width,
  overlayProps,
  focusZoneSettings
}) => {
  const anchorRef = useRef(null);
  const [overlayRef, updateOverlayRef] = useRenderForcingRef();
  const anchorId = useMemo(uniqueId, []);
  const onClickOutside = useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose('click-outside'), [onClose]);
  const onEscape = useCallback(() => onClose === null || onClose === void 0 ? void 0 : onClose('escape'), [onClose]);
  const onAnchorKeyDown = useCallback(event => {
    if (!event.defaultPrevented) {
      if (!open && ['ArrowDown', 'ArrowUp', ' ', 'Enter'].includes(event.key)) {
        onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-key-press');
        event.preventDefault();
      }
    }
  }, [open, onOpen]);
  const onAnchorClick = useCallback(event => {
    if (!event.defaultPrevented && event.button === 0 && !open) {
      onOpen === null || onOpen === void 0 ? void 0 : onOpen('anchor-click');
    }
  }, [open, onOpen]);
  const {
    position
  } = useAnchoredPosition({
    anchorElementRef: anchorRef,
    floatingElementRef: overlayRef
  }, [overlayRef.current]);
  const overlayPosition = useMemo(() => {
    return position && {
      top: `${position.top}px`,
      left: `${position.left}px`
    };
  }, [position]);
  useFocusZone({
    containerRef: overlayRef,
    disabled: !open || !position,
    ...focusZoneSettings
  });
  useFocusTrap({
    containerRef: overlayRef,
    disabled: !open || !position
  });
  return /*#__PURE__*/React.createElement(React.Fragment, null, renderAnchor({
    ref: anchorRef,
    id: anchorId,
    'aria-labelledby': anchorId,
    'aria-haspopup': 'listbox',
    tabIndex: 0,
    onClick: onAnchorClick,
    onKeyDown: onAnchorKeyDown
  }), open ? /*#__PURE__*/React.createElement(Overlay, _extends({
    returnFocusRef: anchorRef,
    onClickOutside: onClickOutside,
    onEscape: onEscape,
    ref: updateOverlayRef,
    role: "listbox",
    visibility: position ? 'visible' : 'hidden',
    height: height,
    width: width
  }, overlayPosition, overlayProps), children) : null);
};
AnchoredOverlay.displayName = 'AnchoredOverlay';