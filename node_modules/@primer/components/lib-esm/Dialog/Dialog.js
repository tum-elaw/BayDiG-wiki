function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import React, { useCallback, useEffect, useRef } from 'react';
import styled from 'styled-components';
import Button, { ButtonPrimary, ButtonDanger } from '../Button';
import Flex from '../Flex';
import Box from '../Box';
import { get, COMMON, POSITION } from '../constants';
import { useOnEscapePress } from '../hooks';
import { useFocusTrap } from '../hooks/useFocusTrap';
import sx from '../sx';
import StyledOcticon from '../StyledOcticon';
import { XIcon } from '@primer/octicons-react';
import { useFocusZone } from '../hooks/useFocusZone';
import { FocusKeys } from '../behaviors/focusZone';
import Portal from '../Portal';
import { uniqueId } from '../utils/uniqueId';
import { useCombinedRefs } from '../hooks/useCombinedRefs';
const ANIMATION_DURATION = '200ms';
/**
 * Props that characterize a button to be rendered into the footer of
 * a Dialog.
 */

const Backdrop = styled('div').withConfig({
  displayName: "Dialog__Backdrop",
  componentId: "sc-11pkgky-0"
})(["position:fixed;top:0;left:0;bottom:0;right:0;display:flex;align-items:center;justify-content:center;background-color:rgba(0,0,0,0.4);animation:dialog-backdrop-appear ", " ", ";@keyframes dialog-backdrop-appear{0%{opacity:0;}100%{opacity:1;}}"], ANIMATION_DURATION, get('animation.easeOutCubic'));
const heightMap = {
  sm: '480px',
  lg: '640px',
  auto: 'auto'
};
const widthMap = {
  sm: '296px',
  md: '320px',
  lg: '480px',
  xl: '640px'
};
const StyledDialog = styled.div.withConfig({
  displayName: "Dialog__StyledDialog",
  componentId: "sc-11pkgky-1"
})(["display:flex;flex-direction:column;background-color:", ";box-shadow:0px 1px 3px rgba(0,0,0,0.12),0px 8px 24px rgba(149,157,165,0.2);min-width:296px;max-width:calc(100vw - 64px);max-height:calc(100vh - 64px);width:", ";height:", ";border-radius:12px;opacity:1;animation:overlay--dialog-appear ", " ", ";@keyframes overlay--dialog-appear{0%{opacity:0;transform:scale(0.5);}100%{opacity:1;transform:scale(1);}}", ";", ";", ";"], get('colors.bg.overlay'), props => {
  var _props$width;

  return widthMap[(_props$width = props.width) !== null && _props$width !== void 0 ? _props$width : 'xl'];
}, props => {
  var _props$height;

  return heightMap[(_props$height = props.height) !== null && _props$height !== void 0 ? _props$height : 'auto'];
}, ANIMATION_DURATION, get('animation.easeOutCubic'), COMMON, POSITION, sx);

const DefaultHeader = ({
  dialogLabelId,
  title,
  subtitle,
  dialogDescriptionId,
  onClose
}) => {
  const onCloseClick = useCallback(() => {
    onClose('close-button');
  }, [onClose]);
  return /*#__PURE__*/React.createElement(Dialog.Header, null, /*#__PURE__*/React.createElement(Flex, null, /*#__PURE__*/React.createElement(Flex, {
    px: 2,
    py: "6px",
    flexDirection: "column",
    flexGrow: 1
  }, /*#__PURE__*/React.createElement(Dialog.Title, {
    id: dialogLabelId
  }, title !== null && title !== void 0 ? title : 'Dialog'), subtitle && /*#__PURE__*/React.createElement(Dialog.Subtitle, {
    id: dialogDescriptionId
  }, subtitle)), /*#__PURE__*/React.createElement(Dialog.CloseButton, {
    onClose: onCloseClick
  })));
};

DefaultHeader.displayName = "DefaultHeader";

const DefaultBody = ({
  children
}) => {
  return /*#__PURE__*/React.createElement(Dialog.Body, null, children);
};

DefaultBody.displayName = "DefaultBody";

const DefaultFooter = ({
  footerButtons
}) => {
  const {
    containerRef: footerRef
  } = useFocusZone({
    bindKeys: FocusKeys.ArrowHorizontal | FocusKeys.Tab,
    focusInStrategy: 'closest'
  });
  return footerButtons ? /*#__PURE__*/React.createElement(Dialog.Footer, {
    ref: footerRef
  }, /*#__PURE__*/React.createElement(Dialog.Buttons, {
    buttons: footerButtons
  })) : null;
};

const _Dialog = React.forwardRef((props, forwardedRef) => {
  const {
    title = 'Dialog',
    subtitle = '',
    renderHeader,
    renderBody,
    renderFooter,
    onClose,
    role = 'dialog',
    width = 'xl',
    height = 'auto'
  } = props;
  const dialogLabelId = uniqueId();
  const dialogDescriptionId = uniqueId();
  const defaultedProps = { ...props,
    title,
    subtitle,
    role,
    dialogLabelId,
    dialogDescriptionId
  };
  const dialogRef = useRef(null);
  const combinedRef = useCombinedRefs(dialogRef, forwardedRef);
  const backdropRef = useRef(null);
  useFocusTrap({
    containerRef: dialogRef,
    restoreFocusOnCleanUp: true
  });
  useOnEscapePress(event => {
    onClose('escape');
    event.preventDefault();
  }, [onClose]);
  const header = (renderHeader !== null && renderHeader !== void 0 ? renderHeader : DefaultHeader)(defaultedProps);
  const body = (renderBody !== null && renderBody !== void 0 ? renderBody : DefaultBody)(defaultedProps);
  const footer = (renderFooter !== null && renderFooter !== void 0 ? renderFooter : DefaultFooter)(defaultedProps);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Portal, null, /*#__PURE__*/React.createElement(Backdrop, {
    ref: backdropRef
  }, /*#__PURE__*/React.createElement(StyledDialog, {
    width: width,
    height: height,
    ref: combinedRef,
    role: role,
    "aria-labelledby": dialogLabelId,
    "aria-describedby": dialogDescriptionId
  }, header, body, footer))));
});

_Dialog.displayName = 'Dialog';
const Header = styled(Box).attrs({
  as: 'header'
}).withConfig({
  displayName: "Dialog__Header",
  componentId: "sc-11pkgky-2"
})(["box-shadow:0 1px 0 ", ";padding:", ";z-index:1;flex-shrink:0;"], get('colors.border.overlay'), get('space.2'));
const Title = styled(Box).withConfig({
  displayName: "Dialog__Title",
  componentId: "sc-11pkgky-3"
})(["font-size:", ";font-weight:", ";"], get('fontSizes.1'), get('fontWeights.bold'));
const Subtitle = styled(Box).withConfig({
  displayName: "Dialog__Subtitle",
  componentId: "sc-11pkgky-4"
})(["font-size:", ";margin-top:", ";color:", ";"], get('fontSizes.0'), get('space.1'), get('colors.text.tertiary'));
const Body = styled(Box).withConfig({
  displayName: "Dialog__Body",
  componentId: "sc-11pkgky-5"
})(["flex-grow:1;overflow:auto;padding:", ";"], get('space.3'));
const Footer = styled(Box).attrs({
  as: 'footer'
}).withConfig({
  displayName: "Dialog__Footer",
  componentId: "sc-11pkgky-6"
})(["box-shadow:0 -1px 0 ", ";padding:", ";display:flex;flex-flow:wrap;justify-content:flex-end;z-index:1;flex-shrink:0;button{margin-left:", ";&:first-child{margin-left:0;}}"], get('colors.border.overlay'), get('space.3'), get('space.1'));
const buttonTypes = {
  normal: Button,
  primary: ButtonPrimary,
  danger: ButtonDanger
};

const Buttons = ({
  buttons
}) => {
  const autoFocusRef = useRef(null);
  let autoFocusCount = 0;
  useEffect(() => {
    if (autoFocusRef.current) {
      autoFocusRef.current.focus();
    }
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, buttons.map((dialogButtonProps, index) => {
    const {
      content,
      buttonType = 'normal',
      autoFocus = false,
      ...buttonProps
    } = dialogButtonProps;
    const ButtonElement = buttonTypes[buttonType];
    return /*#__PURE__*/React.createElement(ButtonElement, _extends({
      key: index
    }, buttonProps, {
      ref: autoFocus && autoFocusCount === 0 ? (autoFocusCount++, autoFocusRef) : null
    }), content);
  }));
};

const DialogCloseButton = styled(Button).withConfig({
  displayName: "Dialog__DialogCloseButton",
  componentId: "sc-11pkgky-7"
})(["border-radius:4px;background:transparent;border:0;vertical-align:middle;color:", ";padding:", ";align-self:flex-start;line-height:normal;box-shadow:none;"], get('colors.text.secondary'), get('space.2'));

const CloseButton = ({
  onClose
}) => {
  return /*#__PURE__*/React.createElement(DialogCloseButton, {
    "aria-label": "Close",
    onClick: onClose
  }, /*#__PURE__*/React.createElement(StyledOcticon, {
    icon: XIcon
  }));
};

CloseButton.displayName = "CloseButton";

/**
 * A dialog is a type of overlay that can be used for confirming actions, asking
 * for disambiguation, and presenting small forms. They generally allow the user
 * to focus on a quick task without having to navigate to a different page.
 *
 * Dialogs appear in the page after a direct user interaction. Don't show dialogs
 * on page load or as system alerts.
 *
 * Dialogs appear centered in the page, with a visible backdrop that dims the rest
 * of the window for focus.
 *
 * All dialogs have a title and a close button.
 *
 * Dialogs are modal. Dialogs can be dismissed by clicking on the close button,
 * pressing the escape key, or by interacting with another button in the dialog.
 * To avoid losing information and missing important messages, clicking outside
 * of the dialog will not close it.
 *
 * The sub components provided (e.g. Header, Title, etc.) are available for custom
 * renderers only. They are not intended to be used otherwise.
 */
export const Dialog = Object.assign(_Dialog, {
  Header,
  Title,
  Subtitle,
  Body,
  Footer,
  Buttons,
  CloseButton
});