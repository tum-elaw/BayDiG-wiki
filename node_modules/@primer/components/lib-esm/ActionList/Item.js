function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { CheckIcon } from '@primer/octicons-react';
import React, { useCallback } from 'react';
import { get } from '../constants';
import sx from '../sx';
import Flex from '../Flex';
import styled from 'styled-components';
import { StyledHeader } from './Header';
import { StyledDivider } from './Divider';
/**
 * Contract for props passed to the `Item` component.
 */

const getItemVariant = (variant = 'default', disabled) => {
  if (disabled) {
    return {
      color: get('colors.text.disabled'),
      iconColor: get('colors.text.disabled'),
      annotationColor: get('colors.text.disabled'),
      hoverBackground: 'inherit',
      hoverCursor: 'default'
    };
  }

  switch (variant) {
    case 'danger':
      return {
        color: get('colors.text.danger'),
        iconColor: get('colors.icon.danger'),
        annotationColor: get('colors.text.disabled'),
        hoverBackground: get('colors.bg.danger'),
        hoverCursor: 'pointer'
      };

    default:
      return {
        color: 'inherit',
        iconColor: get('colors.text.disabled'),
        annotationColor: get('colors.text.disabled'),
        hoverBackground: get('colors.selectMenu.tapHighlight'),
        hoverCursor: 'pointer'
      };
  }
};

const StyledItemContent = styled.div.withConfig({
  displayName: "Item__StyledItemContent",
  componentId: "jqpvy8-0"
})(["width:100%;"]);
const StyledItem = styled.div.withConfig({
  displayName: "Item__StyledItem",
  componentId: "jqpvy8-1"
})(["padding:6px ", ";display:flex;border-radius:", ";color:", ";@media (hover:hover) and (pointer:fine){:hover{background:", ";cursor:", ";}}:not(:first-of-type):not(", " + &):not(", " + &){margin-top:", ";", "::before{content:' ';display:block;position:relative;top:-7px;border:0 solid ", ";border-top-width:", ";}}", ""], get('space.2'), get('radii.2'), ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).color, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).hoverBackground, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).hoverCursor, StyledDivider, StyledHeader, ({
  showDivider
}) => showDivider ? `1px` : '0', StyledItemContent, get('colors.selectMenu.borderSecondary'), ({
  showDivider
}) => showDivider ? `1px` : '0', sx);
const StyledTextContainer = styled.div.withConfig({
  displayName: "Item__StyledTextContainer",
  componentId: "jqpvy8-2"
})(["display:flex;flex-direction:", ";"], ({
  descriptionVariant
}) => descriptionVariant === 'inline' ? 'row' : 'column');
const BaseVisualContainer = styled.div.withConfig({
  displayName: "Item__BaseVisualContainer",
  componentId: "jqpvy8-3"
})(["height:20px;width:", ";display:flex;flex-direction:column;justify-content:center;margin-right:", ";svg{fill:", ";font-size:", ";}"], get('space.3'), get('space.2'), ({
  variant,
  disabled
}) => getItemVariant(variant, disabled).iconColor, get('fontSizes.0'));
const LeadingVisualContainer = styled(BaseVisualContainer).withConfig({
  displayName: "Item__LeadingVisualContainer",
  componentId: "jqpvy8-4"
})([""]);
const TrailingVisualContainer = styled(BaseVisualContainer).withConfig({
  displayName: "Item__TrailingVisualContainer",
  componentId: "jqpvy8-5"
})(["color:", "};margin-left:auto;margin-right:0;div:nth-child(2){margin-left:", ";}display:flex;flex-direction:row;justify-content:flex-end;"], ({
  variant,
  disabled
}) => getItemVariant(variant, disabled).annotationColor, get('space.2'));
const DescriptionContainer = styled.span.withConfig({
  displayName: "Item__DescriptionContainer",
  componentId: "jqpvy8-6"
})(["color:", ";margin-left:", ";"], get('colors.text.secondary'), ({
  descriptionVariant
}) => descriptionVariant === 'inline' ? get('space.2') : 0);
/**
 * An actionable or selectable `Item` with an optional icon and description.
 */

export function Item(itemProps) {
  const {
    text,
    description,
    descriptionVariant = 'inline',
    selected,
    selectionVariant,
    leadingVisual: LeadingVisual,
    trailingIcon: TrailingIcon,
    trailingText,
    variant = 'default',
    showDivider,
    disabled,
    onAction,
    onKeyPress,
    children,
    onClick,
    id,
    ...props
  } = itemProps;
  const keyPressHandler = useCallback(event => {
    if (disabled) {
      return;
    }

    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(event);
    const isCheckbox = event.target instanceof HTMLInputElement && event.target.type === 'checkbox';

    if (isCheckbox && event.key === ' ') {
      // space key on a checkbox will also trigger a click event.  Ignore the space key so we don't get double events
      return;
    }

    if (!event.defaultPrevented && [' ', 'Enter'].includes(event.key)) {
      onAction === null || onAction === void 0 ? void 0 : onAction(itemProps, event);
    }
  }, [onAction, disabled, itemProps, onKeyPress]);
  const clickHandler = useCallback(event => {
    if (disabled) {
      return;
    }

    onClick === null || onClick === void 0 ? void 0 : onClick(event);

    if (!event.defaultPrevented) {
      onAction === null || onAction === void 0 ? void 0 : onAction(itemProps, event);
    }
  }, [onAction, disabled, itemProps, onClick]);
  return /*#__PURE__*/React.createElement(StyledItem, _extends({
    tabIndex: disabled ? undefined : -1,
    variant: variant,
    showDivider: showDivider,
    "aria-selected": selected
  }, props, {
    "data-id": id,
    onKeyPress: keyPressHandler,
    onClick: clickHandler
  }), !!selected === selected && /*#__PURE__*/React.createElement(LeadingVisualContainer, null, selectionVariant === 'multiple' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("input", {
    type: "checkbox",
    checked: selected,
    "aria-label": text,
    readOnly: true,
    "aria-readonly": "false"
  })) : selected && /*#__PURE__*/React.createElement(CheckIcon, null)), LeadingVisual && /*#__PURE__*/React.createElement(LeadingVisualContainer, {
    variant: variant,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(LeadingVisual, null)), /*#__PURE__*/React.createElement(StyledItemContent, null, /*#__PURE__*/React.createElement(Flex, null, children, (text || description) && /*#__PURE__*/React.createElement(StyledTextContainer, {
    descriptionVariant: descriptionVariant
  }, text && /*#__PURE__*/React.createElement("div", null, text), description && /*#__PURE__*/React.createElement(DescriptionContainer, {
    descriptionVariant: descriptionVariant
  }, description)), (TrailingIcon || trailingText) && /*#__PURE__*/React.createElement(TrailingVisualContainer, {
    variant: variant,
    disabled: disabled
  }, trailingText && /*#__PURE__*/React.createElement("div", null, trailingText), TrailingIcon && /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(TrailingIcon, null))))));
}
Item.displayName = "Item";