function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { CheckIcon } from '@primer/octicons-react';
import React, { useCallback, useMemo } from 'react';
import { get } from '../constants';
import sx from '../sx';
import Truncate from '../Truncate';
import styled from 'styled-components';
import { StyledHeader } from './Header';
import { StyledDivider } from './Divider';
import { useColorSchemeVar, useTheme } from '../ThemeProvider';
import { activeDescendantActivatedDirectly, activeDescendantActivatedIndirectly, isActiveDescendantAttribute } from '../behaviors/focusZone';
import { uniqueId } from '../utils/uniqueId';
/**
 * These colors are not yet in our default theme.  Need to remove this once they are added.
 */

const customItemThemes = {
  default: {
    hover: {
      light: 'rgba(46, 77, 108, 0.06)',
      dark: 'rgba(201, 206, 212, 0.12)',
      dark_dimmed: 'rgba(201, 206, 212, 0.12)'
    },
    focus: {
      light: 'rgba(54, 77, 100, 0.16)',
      dark: 'rgba(201, 206, 212, 0.24)',
      dark_dimmed: 'rgba(201, 206, 212, 0.24)'
    }
  },
  danger: {
    hover: {
      light: 'rgba(234, 74, 90, 0.08)',
      dark: 'rgba(248, 81, 73, 0.16)',
      dark_dimmed: 'rgba(248, 81, 73, 0.16)'
    },
    focus: {
      light: 'rgba(234, 74, 90, 0.14)',
      dark: 'rgba(248, 81, 73, 0.24)',
      dark_dimmed: 'rgba(248, 81, 73, 0.24)'
    }
  }
};
/**
 * Contract for props passed to the `Item` component.
 */

const getItemVariant = (variant = 'default', disabled) => {
  if (disabled) {
    return {
      color: get('colors.text.disabled'),
      iconColor: get('colors.text.disabled'),
      annotationColor: get('colors.text.disabled'),
      hoverCursor: 'default'
    };
  }

  switch (variant) {
    case 'danger':
      return {
        color: get('colors.text.danger'),
        iconColor: get('colors.icon.danger'),
        annotationColor: get('colors.text.disabled'),
        hoverCursor: 'pointer'
      };

    default:
      return {
        color: 'inherit',
        iconColor: get('colors.text.secondary'),
        annotationColor: get('colors.text.secondary'),
        hoverCursor: 'pointer'
      };
  }
};

const DividedContent = styled.div.withConfig({
  displayName: "Item__DividedContent",
  componentId: "jqpvy8-0"
})(["display:flex;min-width:0;position:relative;flex-grow:1;"]);
const MainContent = styled.div.withConfig({
  displayName: "Item__MainContent",
  componentId: "jqpvy8-1"
})(["align-items:baseline;display:flex;min-width:0;flex-direction:var(--main-content-flex-direction);flex-grow:1;"]);
const StyledItem = styled.div.withConfig({
  displayName: "Item__StyledItem",
  componentId: "jqpvy8-2"
})(["padding:6px ", ";display:flex;border-radius:", ";color:", ";transition:background 33.333ms linear;@media (hover:hover) and (pointer:fine){:hover{background:var(--item-hover-bg-override,", ");cursor:", ";}}:not(:first-of-type):not(", " + &):not(", " + &){margin-top:", ";", "::before{content:' ';display:block;position:absolute;width:100%;top:-7px;border:0 solid ", ";border-top-width:", ";}}&:hover ", "::before,:hover + * ", "::before{border-color:var(--item-hover-divider-border-color-override,transparent) !important;}&:focus ", "::before,:focus + * ", "::before,&[", "] ", "::before,[", "] + & ", "::before{border-color:transparent !important;}&[", "='", "']{background:", ";}&[", "='", "']{background:", ";}&:focus{background:", ";outline:none;}&:active{background:", ";}", ""], get('space.2'), get('radii.2'), ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).color, ({
  hoverBackground
}) => hoverBackground, ({
  variant,
  item
}) => getItemVariant(variant, item === null || item === void 0 ? void 0 : item.disabled).hoverCursor, StyledDivider, StyledHeader, ({
  showDivider
}) => showDivider ? `1px` : '0', DividedContent, get('colors.selectMenu.borderSecondary'), ({
  showDivider
}) => showDivider ? `1px` : '0', DividedContent, DividedContent, DividedContent, DividedContent, isActiveDescendantAttribute, DividedContent, isActiveDescendantAttribute, DividedContent, isActiveDescendantAttribute, activeDescendantActivatedDirectly, ({
  focusBackground
}) => focusBackground, isActiveDescendantAttribute, activeDescendantActivatedIndirectly, ({
  hoverBackground
}) => hoverBackground, ({
  focusBackground
}) => focusBackground, ({
  focusBackground
}) => focusBackground, sx);
export const TextContainer = styled.span.withConfig({
  displayName: "Item__TextContainer",
  componentId: "jqpvy8-3"
})([""]);
const BaseVisualContainer = styled.div.withConfig({
  displayName: "Item__BaseVisualContainer",
  componentId: "jqpvy8-4"
})(["height:20px;width:", ";margin-right:", ";"], get('space.3'), get('space.2'));
const ColoredVisualContainer = styled(BaseVisualContainer).withConfig({
  displayName: "Item__ColoredVisualContainer",
  componentId: "jqpvy8-5"
})(["svg{fill:", ";font-size:", ";}"], ({
  variant,
  disabled
}) => getItemVariant(variant, disabled).iconColor, get('fontSizes.0'));
const LeadingVisualContainer = styled(ColoredVisualContainer).withConfig({
  displayName: "Item__LeadingVisualContainer",
  componentId: "jqpvy8-6"
})(["flex-shrink:0;display:flex;flex-direction:column;justify-content:center;"]);
const TrailingContent = styled(ColoredVisualContainer).withConfig({
  displayName: "Item__TrailingContent",
  componentId: "jqpvy8-7"
})(["color:", "};margin-left:", ";margin-right:0;width:auto;div:nth-child(2){margin-left:", ";}"], ({
  variant,
  disabled
}) => getItemVariant(variant, disabled).annotationColor, get('space.2'), get('space.2'));
const DescriptionContainer = styled.span.withConfig({
  displayName: "Item__DescriptionContainer",
  componentId: "jqpvy8-8"
})(["color:", ";font-size:", ";line-height:16px;margin-left:var(--description-container-margin-left);min-width:0;flex-grow:1;flex-basis:var(--description-container-flex-basis);"], get('colors.text.secondary'), get('fontSizes.0'));
const MultiSelectInput = styled.input.withConfig({
  displayName: "Item__MultiSelectInput",
  componentId: "jqpvy8-9"
})(["pointer-events:none;"]);
/**
 * An actionable or selectable `Item` with an optional icon and description.
 */

export function Item(itemProps) {
  const {
    text,
    description,
    descriptionVariant = 'inline',
    selected,
    selectionVariant,
    leadingVisual: LeadingVisual,
    trailingIcon: TrailingIcon,
    trailingText,
    variant = 'default',
    showDivider,
    disabled,
    onAction,
    onKeyPress,
    children,
    onClick,
    id,
    ...props
  } = itemProps;
  const labelId = useMemo(() => uniqueId(), []);
  const descriptionId = useMemo(() => uniqueId(), []);
  const keyPressHandler = useCallback(event => {
    if (disabled) {
      return;
    }

    onKeyPress === null || onKeyPress === void 0 ? void 0 : onKeyPress(event);
    const isCheckbox = event.target instanceof HTMLInputElement && event.target.type === 'checkbox';

    if (isCheckbox && event.key === ' ') {
      // space key on a checkbox will also trigger a click event.  Ignore the space key so we don't get double events
      return;
    }

    if (!event.defaultPrevented && [' ', 'Enter'].includes(event.key)) {
      onAction === null || onAction === void 0 ? void 0 : onAction(itemProps, event);
    }
  }, [onAction, disabled, itemProps, onKeyPress]);
  const clickHandler = useCallback(event => {
    if (disabled) {
      return;
    }

    onClick === null || onClick === void 0 ? void 0 : onClick(event);

    if (!event.defaultPrevented) {
      onAction === null || onAction === void 0 ? void 0 : onAction(itemProps, event);
    }
  }, [onAction, disabled, itemProps, onClick]);
  const customItemTheme = customItemThemes[variant];
  const hoverBackground = useColorSchemeVar(customItemTheme.hover, 'inherit');
  const focusBackground = useColorSchemeVar(customItemTheme.focus, 'inherit');
  const {
    theme
  } = useTheme();
  return /*#__PURE__*/React.createElement(StyledItem, _extends({
    tabIndex: disabled ? undefined : -1,
    variant: variant,
    showDivider: showDivider,
    "aria-selected": selected,
    "aria-labelledby": text ? labelId : undefined,
    "aria-describedby": description ? descriptionId : undefined
  }, props, {
    "data-id": id,
    onKeyPress: keyPressHandler,
    onClick: clickHandler,
    hoverBackground: disabled ? 'inherit' : hoverBackground,
    focusBackground: disabled ? 'inherit' : focusBackground
  }), !!selected === selected && /*#__PURE__*/React.createElement(BaseVisualContainer, null, selectionVariant === 'multiple' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(MultiSelectInput, {
    disabled: disabled,
    tabIndex: -1,
    type: "checkbox",
    checked: selected,
    "aria-label": text,
    readOnly: true,
    "aria-readonly": "false"
  })) : selected && /*#__PURE__*/React.createElement(CheckIcon, {
    fill: theme === null || theme === void 0 ? void 0 : theme.colors.text.primary
  })), LeadingVisual && /*#__PURE__*/React.createElement(LeadingVisualContainer, {
    variant: variant,
    disabled: disabled
  }, /*#__PURE__*/React.createElement(LeadingVisual, null)), /*#__PURE__*/React.createElement(DividedContent, null, /*#__PURE__*/React.createElement(MainContent, {
    style: {
      '--main-content-flex-direction': descriptionVariant === 'inline' ? 'row' : 'column'
    }
  }, children, text ? /*#__PURE__*/React.createElement(TextContainer, {
    id: labelId
  }, text) : null, description ? /*#__PURE__*/React.createElement(DescriptionContainer, {
    id: descriptionId,
    style: {
      '--description-container-margin-left': descriptionVariant === 'inline' ? get('space.2')(theme) : 0,
      '--description-container-flex-basis': descriptionVariant === 'inline' ? 0 : 'auto'
    }
  }, descriptionVariant === 'block' ? description : /*#__PURE__*/React.createElement(Truncate, {
    title: description,
    inline: true,
    maxWidth: "100%"
  }, description)) : null), TrailingIcon || trailingText ? /*#__PURE__*/React.createElement(TrailingContent, {
    variant: variant,
    disabled: disabled
  }, trailingText, TrailingIcon && /*#__PURE__*/React.createElement(TrailingIcon, null)) : null));
}
Item.displayName = "Item";