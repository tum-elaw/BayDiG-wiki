function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import classnames from 'classnames'; // eslint-disable-next-line import/no-namespace

import React from 'react';
import styled from 'styled-components';
import { COMMON, FLEX, get } from './constants';
import Flex from './Flex';
import sx from './sx';
const ITEM_CLASS = 'SubNav-item';
const SELECTED_CLASS = 'selected';
const SubNavBase = styled.nav.withConfig({
  displayName: "SubNav__SubNavBase",
  componentId: "f7w0xa-0"
})(["display:flex;justify-content:space-between;.SubNav-body{display:flex;margin-bottom:-1px;> *{margin-left:", ";}> *:first-child{margin-left:0;}}.SubNav-actions{align-self:center;}", ";", ";", ";"], get('space.2'), COMMON, FLEX, sx);

function SubNav({
  actions,
  className,
  children,
  label,
  ...rest
}) {
  const classes = classnames(className, 'SubNav');
  return /*#__PURE__*/React.createElement(SubNavBase, _extends({
    className: classes,
    "aria-label": label
  }, rest), /*#__PURE__*/React.createElement("div", {
    className: "SubNav-body"
  }, children), actions && /*#__PURE__*/React.createElement("div", {
    className: "SubNav-actions"
  }, actions));
}

SubNav.displayName = "SubNav";

function SubNavLinks(props) {
  return /*#__PURE__*/React.createElement(Flex, props);
}

SubNavLinks.displayName = "SubNavLinks";
const SubNavLink = styled.a.attrs(props => ({
  activeClassName: typeof props.to === 'string' ? 'selected' : '',
  className: classnames(ITEM_CLASS, props.selected && SELECTED_CLASS, props.className)
})).withConfig({
  displayName: "SubNav__SubNavLink",
  componentId: "f7w0xa-1"
})(["padding-left:", ";padding-right:", ";font-weight:", ";font-size:", ";line-height:20px;min-height:34px;color:", ";text-align:center;text-decoration:none;border-top:1px solid ", ";border-bottom:1px solid ", ";border-right:1px solid ", ";display:flex;align-items:center;&:first-of-type{border-top-left-radius:", ";border-bottom-left-radius:", ";border-left:1px solid ", ";}&:last-of-type{border-top-right-radius:", ";border-bottom-right-radius:", ";}&:hover,&:focus{text-decoration:none;background-color:", ";transition:0.2s ease;.SubNav-octicon{color:", ";}}&.selected{color:", ";background-color:", ";border-color:", ";.SubNav-octicon{color:", ";}}", ";", ";"], get('space.3'), get('space.3'), get('fontWeights.semibold'), get('fontSizes.1'), get('colors.text.primary'), get('colors.border.primary'), get('colors.border.primary'), get('colors.border.primary'), get('radii.2'), get('radii.2'), get('colors.border.primary'), get('radii.2'), get('radii.2'), get('colors.bg.tertiary'), get('colors.icon.secondary'), get('colors.state.selected.primaryText'), get('colors.state.selected.primaryBg'), get('colors.state.selected.primaryBorder'), get('colors.state.selected.primaryText'), COMMON, sx);
SubNavLink.displayName = 'SubNav.Link';
SubNavLinks.displayName = 'SubNav.Links';
export default Object.assign(SubNav, {
  Link: SubNavLink,
  Links: SubNavLinks
});