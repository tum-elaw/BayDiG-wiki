import React from 'react';
import { SystemCommonProps, SystemLayoutProps } from './constants';
import { SxProp } from './sx';
import { ComponentProps } from './utils/types';
declare type StyledDialogBaseProps = {
    narrow?: boolean;
    wide?: boolean;
} & SystemLayoutProps & SystemCommonProps & SxProp;
declare const DialogBase: import("styled-components").StyledComponent<"div", any, StyledDialogBaseProps, never>;
declare const DialogHeaderBase: import("styled-components").StyledComponent<"div", any, SystemCommonProps & import("./constants").SystemFlexProps & SystemLayoutProps & SxProp, never>;
export declare type DialogHeaderProps = ComponentProps<typeof DialogHeaderBase>;
declare function DialogHeader({ theme, children, backgroundColor, ...rest }: DialogHeaderProps): JSX.Element;
declare namespace DialogHeader {
    var defaultProps: {
        backgroundColor: string;
    };
    var propTypes: {
        alignContent?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | undefined;
        } | null | undefined> | undefined;
        alignItems?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | undefined;
        } | null | undefined> | undefined;
        alignSelf?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | undefined;
        } | null | undefined> | undefined;
        backgroundColor?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        color?: React.Validator<string | (string & (string | number | symbol | null)[]) | (string & {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        }) | null | undefined> | undefined;
        display?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "flex" | "grid" | "none" | "ruby" | "table" | "block" | "inline" | "run-in" | "-ms-flexbox" | "-ms-grid" | "-webkit-flex" | "flow" | "flow-root" | "ruby-base" | "ruby-base-container" | "ruby-text" | "ruby-text-container" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group" | "-ms-inline-flexbox" | "-ms-inline-grid" | "-webkit-inline-flex" | "inline-block" | "inline-flex" | "inline-grid" | "inline-list-item" | "inline-table" | "contents" | "list-item" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "flex" | "grid" | "none" | "ruby" | "table" | "block" | "inline" | "run-in" | "-ms-flexbox" | "-ms-grid" | "-webkit-flex" | "flow" | "flow-root" | "ruby-base" | "ruby-base-container" | "ruby-text" | "ruby-text-container" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group" | "-ms-inline-flexbox" | "-ms-inline-grid" | "-webkit-inline-flex" | "inline-block" | "inline-flex" | "inline-grid" | "inline-list-item" | "inline-table" | "contents" | "list-item" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "flex" | "grid" | "none" | "ruby" | "table" | "block" | "inline" | "run-in" | "-ms-flexbox" | "-ms-grid" | "-webkit-flex" | "flow" | "flow-root" | "ruby-base" | "ruby-base-container" | "ruby-text" | "ruby-text-container" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group" | "-ms-inline-flexbox" | "-ms-inline-grid" | "-webkit-inline-flex" | "inline-block" | "inline-flex" | "inline-grid" | "inline-list-item" | "inline-table" | "contents" | "list-item" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "flex" | "grid" | "none" | "ruby" | "table" | "block" | "inline" | "run-in" | "-ms-flexbox" | "-ms-grid" | "-webkit-flex" | "flow" | "flow-root" | "ruby-base" | "ruby-base-container" | "ruby-text" | "ruby-text-container" | "table-caption" | "table-cell" | "table-column" | "table-column-group" | "table-footer-group" | "table-header-group" | "table-row" | "table-row-group" | "-ms-inline-flexbox" | "-ms-inline-grid" | "-webkit-inline-flex" | "inline-block" | "inline-flex" | "inline-grid" | "inline-list-item" | "inline-table" | "contents" | "list-item" | undefined;
        } | null | undefined> | undefined;
        flexBasis?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        flexDirection?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "row" | "column" | "column-reverse" | "row-reverse" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "row" | "column" | "column-reverse" | "row-reverse" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "row" | "column" | "column-reverse" | "row-reverse" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "row" | "column" | "column-reverse" | "row-reverse" | undefined;
        } | null | undefined> | undefined;
        flexGrow?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
        } | null | undefined> | undefined;
        flexShrink?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
        } | null | undefined> | undefined;
        flexWrap?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | undefined;
        } | null | undefined> | undefined;
        height?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        justifyContent?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "space-around" | "space-between" | "space-evenly" | "stretch" | "flex-end" | "flex-start" | undefined;
        } | null | undefined> | undefined;
        justifyItems?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | "legacy" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | "legacy" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | "legacy" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | "legacy" | undefined;
        } | null | undefined> | undefined;
        justifySelf?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "left" | "right" | "normal" | "center" | "end" | "start" | "baseline" | "stretch" | "flex-end" | "flex-start" | "self-end" | "self-start" | undefined;
        } | null | undefined> | undefined;
        marginBottom?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        marginLeft?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        marginRight?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        marginTop?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        maxHeight?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        maxWidth?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        minHeight?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        minWidth?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        opacity?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | (number & {}) | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | (number & {}) | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | (number & {}) | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | (number & {}) | undefined;
        } | null | undefined> | undefined;
        order?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (number & {}) | undefined;
        } | null | undefined> | undefined;
        overflowX?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | undefined;
        } | null | undefined> | undefined;
        overflowY?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | undefined;
        } | null | undefined> | undefined;
        paddingBottom?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        paddingLeft?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        paddingRight?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        paddingTop?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        translate?: React.Validator<"yes" | "no" | null | undefined> | undefined;
        verticalAlign?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        width?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        flex?: React.Validator<string | number | (string & {}) | (number & {}) | (string | number | (string & {}) | (number & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | (number & {}) | undefined;
            [x: number]: string | number | (string & {}) | (number & {}) | undefined;
        } | null | undefined> | undefined;
        margin?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        overflow?: React.Validator<"-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | ("-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | null)[] | {
            [x: string]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | undefined;
            [x: number]: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | (string & {}) | "auto" | "clip" | "hidden" | "visible" | "scroll" | "-moz-hidden-unscrollable" | undefined;
        } | null | undefined> | undefined;
        padding?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        hidden?: React.Validator<boolean | null | undefined> | undefined;
        children?: React.Validator<React.ReactNode> | undefined;
        ref?: React.Validator<((instance: HTMLDivElement | null) => void) | React.RefObject<HTMLDivElement> | null | undefined> | undefined;
        p?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        slot?: React.Validator<string | null | undefined> | undefined;
        style?: React.Validator<React.CSSProperties | null | undefined> | undefined;
        title?: React.Validator<string | null | undefined> | undefined;
        key?: React.Validator<string | number | null | undefined> | undefined;
        defaultChecked?: React.Validator<boolean | null | undefined> | undefined;
        defaultValue?: React.Validator<string | number | readonly string[] | null | undefined> | undefined;
        suppressContentEditableWarning?: React.Validator<boolean | null | undefined> | undefined;
        suppressHydrationWarning?: React.Validator<boolean | null | undefined> | undefined;
        accessKey?: React.Validator<string | null | undefined> | undefined;
        className?: React.Validator<string | null | undefined> | undefined;
        contentEditable?: React.Validator<boolean | "inherit" | "true" | "false" | null | undefined> | undefined;
        contextMenu?: React.Validator<string | null | undefined> | undefined;
        dir?: React.Validator<string | null | undefined> | undefined;
        draggable?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        id?: React.Validator<string | null | undefined> | undefined;
        lang?: React.Validator<string | null | undefined> | undefined;
        placeholder?: React.Validator<string | null | undefined> | undefined;
        spellCheck?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        tabIndex?: React.Validator<number | null | undefined> | undefined;
        radioGroup?: React.Validator<string | null | undefined> | undefined;
        role?: React.Validator<string | null | undefined> | undefined;
        about?: React.Validator<string | null | undefined> | undefined;
        datatype?: React.Validator<string | null | undefined> | undefined;
        inlist?: React.Validator<any> | undefined;
        prefix?: React.Validator<string | null | undefined> | undefined;
        property?: React.Validator<string | null | undefined> | undefined;
        resource?: React.Validator<string | null | undefined> | undefined;
        typeof?: React.Validator<string | null | undefined> | undefined;
        vocab?: React.Validator<string | null | undefined> | undefined;
        autoCapitalize?: React.Validator<string | null | undefined> | undefined;
        autoCorrect?: React.Validator<string | null | undefined> | undefined;
        autoSave?: React.Validator<string | null | undefined> | undefined;
        itemProp?: React.Validator<string | null | undefined> | undefined;
        itemScope?: React.Validator<boolean | null | undefined> | undefined;
        itemType?: React.Validator<string | null | undefined> | undefined;
        itemID?: React.Validator<string | null | undefined> | undefined;
        itemRef?: React.Validator<string | null | undefined> | undefined;
        results?: React.Validator<number | null | undefined> | undefined;
        security?: React.Validator<string | null | undefined> | undefined;
        unselectable?: React.Validator<"on" | "off" | null | undefined> | undefined;
        inputMode?: React.Validator<"none" | "text" | "search" | "tel" | "url" | "email" | "numeric" | "decimal" | null | undefined> | undefined;
        is?: React.Validator<string | null | undefined> | undefined;
        'aria-activedescendant'?: React.Validator<string | null | undefined> | undefined;
        'aria-atomic'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-autocomplete'?: React.Validator<"none" | "list" | "inline" | "both" | null | undefined> | undefined;
        'aria-busy'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-checked'?: React.Validator<boolean | "true" | "false" | "mixed" | null | undefined> | undefined;
        'aria-colcount'?: React.Validator<number | null | undefined> | undefined;
        'aria-colindex'?: React.Validator<number | null | undefined> | undefined;
        'aria-colspan'?: React.Validator<number | null | undefined> | undefined;
        'aria-controls'?: React.Validator<string | null | undefined> | undefined;
        'aria-current'?: React.Validator<boolean | "time" | "true" | "false" | "page" | "step" | "location" | "date" | null | undefined> | undefined;
        'aria-describedby'?: React.Validator<string | null | undefined> | undefined;
        'aria-details'?: React.Validator<string | null | undefined> | undefined;
        'aria-disabled'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-dropeffect'?: React.Validator<"none" | "link" | "copy" | "execute" | "move" | "popup" | null | undefined> | undefined;
        'aria-errormessage'?: React.Validator<string | null | undefined> | undefined;
        'aria-expanded'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-flowto'?: React.Validator<string | null | undefined> | undefined;
        'aria-grabbed'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-haspopup'?: React.Validator<boolean | "grid" | "dialog" | "menu" | "listbox" | "tree" | "true" | "false" | null | undefined> | undefined;
        'aria-hidden'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-invalid'?: React.Validator<boolean | "true" | "false" | "grammar" | "spelling" | null | undefined> | undefined;
        'aria-keyshortcuts'?: React.Validator<string | null | undefined> | undefined;
        'aria-label'?: React.Validator<string | null | undefined> | undefined;
        'aria-labelledby'?: React.Validator<string | null | undefined> | undefined;
        'aria-level'?: React.Validator<number | null | undefined> | undefined;
        'aria-live'?: React.Validator<"off" | "assertive" | "polite" | null | undefined> | undefined;
        'aria-modal'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-multiline'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-multiselectable'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-orientation'?: React.Validator<"horizontal" | "vertical" | null | undefined> | undefined;
        'aria-owns'?: React.Validator<string | null | undefined> | undefined;
        'aria-placeholder'?: React.Validator<string | null | undefined> | undefined;
        'aria-posinset'?: React.Validator<number | null | undefined> | undefined;
        'aria-pressed'?: React.Validator<boolean | "true" | "false" | "mixed" | null | undefined> | undefined;
        'aria-readonly'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-relevant'?: React.Validator<"all" | "text" | "additions" | "additions removals" | "additions text" | "removals" | "removals additions" | "removals text" | "text additions" | "text removals" | null | undefined> | undefined;
        'aria-required'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-roledescription'?: React.Validator<string | null | undefined> | undefined;
        'aria-rowcount'?: React.Validator<number | null | undefined> | undefined;
        'aria-rowindex'?: React.Validator<number | null | undefined> | undefined;
        'aria-rowspan'?: React.Validator<number | null | undefined> | undefined;
        'aria-selected'?: React.Validator<boolean | "true" | "false" | null | undefined> | undefined;
        'aria-setsize'?: React.Validator<number | null | undefined> | undefined;
        'aria-sort'?: React.Validator<"none" | "ascending" | "descending" | "other" | null | undefined> | undefined;
        'aria-valuemax'?: React.Validator<number | null | undefined> | undefined;
        'aria-valuemin'?: React.Validator<number | null | undefined> | undefined;
        'aria-valuenow'?: React.Validator<number | null | undefined> | undefined;
        'aria-valuetext'?: React.Validator<string | null | undefined> | undefined;
        dangerouslySetInnerHTML?: React.Validator<{
            __html: string;
        } | null | undefined> | undefined;
        onCopy?: React.Validator<((event: React.ClipboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCopyCapture?: React.Validator<((event: React.ClipboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCut?: React.Validator<((event: React.ClipboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCutCapture?: React.Validator<((event: React.ClipboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPaste?: React.Validator<((event: React.ClipboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPasteCapture?: React.Validator<((event: React.ClipboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCompositionEnd?: React.Validator<((event: React.CompositionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCompositionEndCapture?: React.Validator<((event: React.CompositionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCompositionStart?: React.Validator<((event: React.CompositionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCompositionStartCapture?: React.Validator<((event: React.CompositionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCompositionUpdate?: React.Validator<((event: React.CompositionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onCompositionUpdateCapture?: React.Validator<((event: React.CompositionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onFocus?: React.Validator<((event: React.FocusEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onFocusCapture?: React.Validator<((event: React.FocusEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onBlur?: React.Validator<((event: React.FocusEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onBlurCapture?: React.Validator<((event: React.FocusEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onChange?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onChangeCapture?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onBeforeInput?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onBeforeInputCapture?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onInput?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onInputCapture?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onReset?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onResetCapture?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onSubmit?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onSubmitCapture?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onInvalid?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onInvalidCapture?: React.Validator<((event: React.FormEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onLoad?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onLoadCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onError?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onErrorCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onKeyDown?: React.Validator<((event: React.KeyboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onKeyDownCapture?: React.Validator<((event: React.KeyboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onKeyPress?: React.Validator<((event: React.KeyboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onKeyPressCapture?: React.Validator<((event: React.KeyboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onKeyUp?: React.Validator<((event: React.KeyboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onKeyUpCapture?: React.Validator<((event: React.KeyboardEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onAbort?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onAbortCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onCanPlay?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onCanPlayCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onCanPlayThrough?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onCanPlayThroughCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onDurationChange?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onDurationChangeCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onEmptied?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onEmptiedCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onEncrypted?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onEncryptedCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onEnded?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onEndedCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onLoadedData?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onLoadedDataCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onLoadedMetadata?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onLoadedMetadataCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onLoadStart?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onLoadStartCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onPause?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onPauseCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onPlay?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onPlayCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onPlaying?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onPlayingCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onProgress?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onProgressCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onRateChange?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onRateChangeCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onSeeked?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onSeekedCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onSeeking?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onSeekingCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onStalled?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onStalledCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onSuspend?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onSuspendCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onTimeUpdate?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onTimeUpdateCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onVolumeChange?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onVolumeChangeCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onWaiting?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onWaitingCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onAuxClick?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onAuxClickCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onClick?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onClickCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onContextMenu?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onContextMenuCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onDoubleClick?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onDoubleClickCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onDrag?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragEnd?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragEndCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragEnter?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragEnterCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragExit?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragExitCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragLeave?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragLeaveCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragOver?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragOverCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragStart?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDragStartCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDrop?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onDropCapture?: React.Validator<((event: React.DragEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onMouseDown?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseDownCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseEnter?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseLeave?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseMove?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseMoveCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseOut?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseOutCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseOver?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseOverCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseUp?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onMouseUpCapture?: React.Validator<((event: React.MouseEvent<HTMLDivElement, MouseEvent>) => void) | null | undefined> | undefined;
        onSelect?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onSelectCapture?: React.Validator<((event: React.SyntheticEvent<HTMLDivElement, Event>) => void) | null | undefined> | undefined;
        onTouchCancel?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTouchCancelCapture?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTouchEnd?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTouchEndCapture?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTouchMove?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTouchMoveCapture?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTouchStart?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTouchStartCapture?: React.Validator<((event: React.TouchEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerDown?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerDownCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerMove?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerMoveCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerUp?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerUpCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerCancel?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerCancelCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerEnter?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerEnterCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerLeave?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerLeaveCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerOver?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerOverCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerOut?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onPointerOutCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onGotPointerCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onGotPointerCaptureCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onLostPointerCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onLostPointerCaptureCapture?: React.Validator<((event: React.PointerEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onScroll?: React.Validator<((event: React.UIEvent<HTMLDivElement, UIEvent>) => void) | null | undefined> | undefined;
        onScrollCapture?: React.Validator<((event: React.UIEvent<HTMLDivElement, UIEvent>) => void) | null | undefined> | undefined;
        onWheel?: React.Validator<((event: React.WheelEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onWheelCapture?: React.Validator<((event: React.WheelEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onAnimationStart?: React.Validator<((event: React.AnimationEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onAnimationStartCapture?: React.Validator<((event: React.AnimationEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onAnimationEnd?: React.Validator<((event: React.AnimationEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onAnimationEndCapture?: React.Validator<((event: React.AnimationEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onAnimationIteration?: React.Validator<((event: React.AnimationEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onAnimationIterationCapture?: React.Validator<((event: React.AnimationEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTransitionEnd?: React.Validator<((event: React.TransitionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        onTransitionEndCapture?: React.Validator<((event: React.TransitionEvent<HTMLDivElement>) => void) | null | undefined> | undefined;
        css?: React.Validator<import("@emotion/core").InterpolationWithTheme<any>> | undefined;
        bg?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        m?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        mt?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        mr?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        mb?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        ml?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        mx?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        marginX?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        my?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        marginY?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        pt?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        pr?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        pb?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        pl?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        px?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        paddingX?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        py?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        paddingY?: React.Validator<string | number | symbol | (string | number | symbol | null)[] | {
            [x: string]: string | number | symbol | undefined;
            [x: number]: string | number | symbol | undefined;
        } | null | undefined> | undefined;
        size?: React.Validator<string | number | (string & {}) | (string | number | (string & {}) | null)[] | {
            [x: string]: string | number | (string & {}) | undefined;
            [x: number]: string | number | (string & {}) | undefined;
        } | null | undefined> | undefined;
        sx?: React.Validator<import("@styled-system/css").SystemCssProperties | import("@styled-system/css").CSSPseudoSelectorProps | import("@styled-system/css").CSSSelectorObject | import("@styled-system/css").VariantProperty | import("@styled-system/css").UseThemeFunction | import("@styled-system/css").EmotionLabel | null | undefined> | undefined;
        theme?: React.Validator<any> | undefined;
    };
    var displayName: string;
}
declare type InternalDialogProps = {
    isOpen?: boolean;
    onDismiss?: () => void;
    initialFocusRef?: React.RefObject<HTMLElement>;
    returnFocusRef?: React.RefObject<HTMLElement>;
} & ComponentProps<typeof DialogBase>;
declare const Dialog: React.ForwardRefExoticComponent<Pick<InternalDialogProps, "backgroundColor" | "color" | "display" | "height" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "opacity" | "overflowX" | "overflowY" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "translate" | "verticalAlign" | "width" | "margin" | "overflow" | "padding" | "hidden" | "children" | "theme" | "p" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "bg" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "marginX" | "my" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "paddingX" | "py" | "paddingY" | "size" | "sx" | "initialFocusRef" | "returnFocusRef" | "isOpen" | "onDismiss" | "narrow" | "wide"> & React.RefAttributes<HTMLElement>>;
export declare type DialogProps = ComponentProps<typeof Dialog>;
declare const _default: React.ForwardRefExoticComponent<Pick<InternalDialogProps, "backgroundColor" | "color" | "display" | "height" | "marginBottom" | "marginLeft" | "marginRight" | "marginTop" | "maxHeight" | "maxWidth" | "minHeight" | "minWidth" | "opacity" | "overflowX" | "overflowY" | "paddingBottom" | "paddingLeft" | "paddingRight" | "paddingTop" | "translate" | "verticalAlign" | "width" | "margin" | "overflow" | "padding" | "hidden" | "children" | "theme" | "p" | "slot" | "style" | "title" | "key" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "className" | "contentEditable" | "contextMenu" | "dir" | "draggable" | "id" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "inputMode" | "is" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClick" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css" | "bg" | "m" | "mt" | "mr" | "mb" | "ml" | "mx" | "marginX" | "my" | "marginY" | "pt" | "pr" | "pb" | "pl" | "px" | "paddingX" | "py" | "paddingY" | "size" | "sx" | "initialFocusRef" | "returnFocusRef" | "isOpen" | "onDismiss" | "narrow" | "wide"> & React.RefAttributes<HTMLElement>> & {
    Header: typeof DialogHeader;
};
export default _default;
