function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { ServerIcon, PlusCircleIcon, TypographyIcon, VersionsIcon, SearchIcon, NoteIcon, ProjectIcon, FilterIcon, GearIcon, ArrowRightIcon } from '@primer/octicons-react';
import React, { useCallback, useState } from 'react';
import styled from 'styled-components';
import { ThemeProvider } from '..';
import { ActionMenu } from '../ActionMenu';
import Link from '../Link';
import Button from '../Button';
import { ActionList } from '../ActionList';
import BaseStyles from '../BaseStyles';
const meta = {
  title: 'Composite components/ActionMenu',
  component: ActionMenu,
  decorators: [Story => /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(BaseStyles, null, /*#__PURE__*/React.createElement(Story, null)))],
  parameters: {
    controls: {
      disabled: true
    }
  }
};
export default meta;
const ErsatzOverlay = styled.div.withConfig({
  displayName: "ActionMenustories__ErsatzOverlay",
  componentId: "sc-1bfovxa-0"
})(["border-radius:12px;box-shadow:0 1px 3px rgba(0,0,0,0.12),0 8px 24px rgba(149,157,165,0.2);padding:8px;"]);
export function ActionsStory() {
  const [option, setOption] = useState('Select an option');

  const onAction = itemProps => {
    var _itemProps$text;

    setOption((_itemProps$text = itemProps.text) !== null && _itemProps$text !== void 0 ? _itemProps$text : '');
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("h1", null, "Actions"), /*#__PURE__*/React.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/React.createElement(ErsatzOverlay, null, /*#__PURE__*/React.createElement(ActionMenu, {
    onAction: onAction,
    anchorContent: /*#__PURE__*/React.createElement(ServerIcon, null),
    items: [{
      leadingVisual: ServerIcon,
      text: 'Open current Codespace',
      description: "Your existing Codespace will be opened to its previous state, and you'll be asked to manually switch to new-branch.",
      descriptionVariant: 'block',
      trailingText: '⌘O'
    }, {
      leadingVisual: PlusCircleIcon,
      text: 'Create new Codespace',
      description: 'Create a brand new Codespace with a fresh image and checkout this branch.',
      descriptionVariant: 'block',
      trailingText: '⌘C'
    }]
  })));
}
ActionsStory.storyName = 'Actions';
export function SimpleListStory() {
  const [option, setOption] = useState('Select an option');

  const onAction = itemProps => {
    setOption(itemProps.text || '');
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("h1", null, "Simple List"), /*#__PURE__*/React.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/React.createElement(ErsatzOverlay, null, /*#__PURE__*/React.createElement(ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    overlayProps: {
      onMouseDown: e => // eslint-disable-next-line no-console
      console.log('onMouseDown in the internal Overlay can be useful for controlling event interactions', e)
    },
    items: [{
      text: 'New file',
      trailingText: '⌘O',
      disabled: true,
      leadingVisual: ProjectIcon
    }, ActionList.Divider, {
      text: 'Copy link',
      trailingText: 'ctrl+C'
    }, {
      text: 'Edit file',
      trailingText: '⌘E'
    }, {
      text: 'Delete file',
      variant: 'danger',
      trailingText: '⌘D'
    }]
  })));
}
SimpleListStory.storyName = 'Simple List';
export function ExternalOpenState() {
  const [option, setOption] = useState('Select an option');
  const [open, setOpen] = useState(false);

  const onAction = itemProps => {
    setOption(itemProps.text);
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("h1", null, "Simple List"), /*#__PURE__*/React.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/React.createElement("h2", null, "External Open State: ", open ? 'Open' : 'Closed'), /*#__PURE__*/React.createElement("div", null, /*#__PURE__*/React.createElement(Button, {
    onClick: () => setOpen(!open)
  }, "Toggle External State")), /*#__PURE__*/React.createElement("br", null), /*#__PURE__*/React.createElement(ErsatzOverlay, null, /*#__PURE__*/React.createElement(ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    open: open,
    setOpen: setOpen,
    items: [{
      text: 'New file',
      trailingText: '⌘O',
      disabled: true,
      leadingVisual: ProjectIcon
    }, ActionList.Divider, {
      text: 'Copy link',
      trailingText: 'ctrl+C'
    }, {
      text: 'Edit file',
      trailingText: '⌘E'
    }, {
      text: 'Delete file',
      variant: 'danger',
      trailingText: '⌘D'
    }]
  })));
}
ExternalOpenState.storyName = 'External Open State';
export function ComplexListStory() {
  const [option, setOption] = useState('Select an option');

  const onAction = itemProps => {
    setOption(itemProps.text || '');
  };

  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("h1", null, "Complex List"), /*#__PURE__*/React.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/React.createElement(ErsatzOverlay, null, /*#__PURE__*/React.createElement(ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    groupMetadata: [{
      groupId: '0'
    }, {
      groupId: '1',
      header: {
        title: 'Live query',
        variant: 'subtle'
      }
    }, {
      groupId: '2',
      header: {
        title: 'Layout',
        variant: 'subtle'
      }
    }, {
      groupId: '3',
      renderItem: props => /*#__PURE__*/React.createElement(ActionList.Item, _extends({
        style: {
          fontWeight: 'bold'
        }
      }, props))
    }, {
      groupId: '4'
    }],
    items: [{
      leadingVisual: TypographyIcon,
      text: 'Rename',
      groupId: '0'
    }, {
      leadingVisual: VersionsIcon,
      text: 'Duplicate',
      groupId: '0'
    }, {
      leadingVisual: SearchIcon,
      text: 'repo:github/github',
      groupId: '1',
      renderItem: props => /*#__PURE__*/React.createElement(ActionList.Item, _extends({
        style: {
          color: 'rebeccapurple'
        }
      }, props)),
      trailingText: '⌘S',
      trailingIcon: ArrowRightIcon
    }, {
      leadingVisual: NoteIcon,
      text: 'Table',
      description: 'Information-dense table optimized for operations across teams',
      descriptionVariant: 'block',
      groupId: '2'
    }, {
      leadingVisual: ProjectIcon,
      text: 'Board',
      description: 'Kanban-style board focused on visual states',
      descriptionVariant: 'block',
      groupId: '2'
    }, {
      leadingVisual: FilterIcon,
      text: 'Save sort and filters to current view',
      groupId: '3'
    }, {
      leadingVisual: FilterIcon,
      text: 'Save sort and filters to new view',
      groupId: '3'
    }, {
      leadingVisual: GearIcon,
      text: 'View settings',
      groupId: '4'
    }]
  })));
}
ComplexListStory.storyName = 'Complex List';
export function CustomTrigger() {
  const customAnchor = props => /*#__PURE__*/React.createElement(Link, _extends({}, props, {
    sx: {
      cursor: 'pointer'
    }
  }));

  const [option, setOption] = useState('Select an option');
  const onAction = useCallback(itemProps => {
    setOption(itemProps.text || '');
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("h1", null, "Custom Trigger"), /*#__PURE__*/React.createElement("h2", null, "Last option activated: ", option), /*#__PURE__*/React.createElement(ErsatzOverlay, null, /*#__PURE__*/React.createElement(ActionMenu, {
    onAction: onAction,
    anchorContent: "Menu",
    renderAnchor: customAnchor,
    items: [{
      text: 'New file'
    }, ActionList.Divider, {
      text: 'Copy link'
    }, {
      text: 'Edit file'
    }, {
      text: 'Delete file',
      variant: 'danger'
    }]
  })));
}
CustomTrigger.storyName = 'Custom Trigger';