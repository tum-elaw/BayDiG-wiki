import React from 'react';
import { BaseStyles, Box, ThemeProvider } from '..';
import Portal, { registerPortalRoot } from '../Portal';
export default {
  title: 'Generic behaviors/Portal',
  component: Portal,
  decorators: [Story => {
    return /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(BaseStyles, null, /*#__PURE__*/React.createElement(Story, null)));
  }]
};
export const defaultPortal = () => /*#__PURE__*/React.createElement(React.Fragment, null, "Root position", /*#__PURE__*/React.createElement(Box, {
  bg: "red.2",
  p: 3
}, "Outer container", /*#__PURE__*/React.createElement(Box, {
  bg: "green.2",
  p: 3
}, "Inner container", /*#__PURE__*/React.createElement(Portal, null, "Portaled content rendered at ", /*#__PURE__*/React.createElement("code", null, "<BaseStyles>"), " root."))));
export const customPortalRootById = () => /*#__PURE__*/React.createElement(React.Fragment, null, "Root position", /*#__PURE__*/React.createElement(Box, {
  bg: "red.2",
  p: 3,
  id: "__primerPortalRoot__"
}, "Outer container", /*#__PURE__*/React.createElement(Box, {
  bg: "green.2",
  p: 3
}, "Inner container", /*#__PURE__*/React.createElement(Portal, null, "Portaled content rendered at the outer container."))));
export const CustomPortalRootByRegistration = () => {
  const outerContainerRef = React.useRef(null);
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => {
    if (outerContainerRef.current instanceof HTMLElement) {
      registerPortalRoot(outerContainerRef.current);
      setMounted(true);
    }
  }, []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, "Root position", /*#__PURE__*/React.createElement(Box, {
    bg: "red.2",
    p: 3,
    ref: outerContainerRef
  }, mounted ? /*#__PURE__*/React.createElement(React.Fragment, null, "Outer container", /*#__PURE__*/React.createElement(Box, {
    bg: "green.2",
    p: 3
  }, "Inner container", /*#__PURE__*/React.createElement(Portal, null, "Portaled content rendered at the outer container."))) : null));
};
export const MultiplePortalRoots = () => {
  const outerContainerRef = React.useRef(null);
  const innerContainerRef = React.useRef(null);
  const [mounted, setMounted] = React.useState(false);
  React.useEffect(() => {
    if (outerContainerRef.current instanceof HTMLElement && innerContainerRef.current instanceof HTMLElement) {
      registerPortalRoot(outerContainerRef.current, 'outer');
      registerPortalRoot(innerContainerRef.current, 'inner');
      setMounted(true);
    }
  }, [outerContainerRef]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, "Root position", /*#__PURE__*/React.createElement(Box, {
    bg: "red.2",
    p: 3,
    ref: outerContainerRef
  }, "Outer container", /*#__PURE__*/React.createElement(Box, {
    bg: "green.2",
    p: 3,
    ref: innerContainerRef
  }, mounted ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Portal, {
    containerName: "outer"
  }, "Portaled content rendered at the outer container."), /*#__PURE__*/React.createElement(Portal, {
    containerName: "inner"
  }, "Portaled content rendered at the end of the inner container."), /*#__PURE__*/React.createElement(Portal, null, "Portaled content rendered at ", /*#__PURE__*/React.createElement("code", null, "<BaseStyles>"), " root.")) : null, "Inner container")));
};