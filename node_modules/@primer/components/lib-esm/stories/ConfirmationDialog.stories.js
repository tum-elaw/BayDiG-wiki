import React, { useState, useRef, useCallback } from 'react';
import { BaseStyles, Button, Flex, ThemeProvider, useTheme } from '..';
import { ConfirmationDialog, useConfirm } from '../Dialog/ConfirmationDialog';
export default {
  title: 'Internal components/ConfirmationDialog',
  component: ConfirmationDialog,
  decorators: [Story => {
    // Since portal roots are registered globally, we need this line so that each storybook
    // story works in isolation.
    return /*#__PURE__*/React.createElement(ThemeProvider, null, /*#__PURE__*/React.createElement(BaseStyles, null, /*#__PURE__*/React.createElement(Story, null)));
  }]
};
export const BasicConfirmationDialog = () => {
  const [isOpen, setIsOpen] = useState(false);
  const buttonRef = useRef(null);
  const onDialogClose = useCallback(() => setIsOpen(false), []);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {
    ref: buttonRef,
    onClick: () => setIsOpen(!isOpen)
  }, "Show dialog"), isOpen && /*#__PURE__*/React.createElement(ConfirmationDialog, {
    title: "Delete universe?",
    onClose: onDialogClose,
    confirmButtonContent: "Delete it!",
    confirmButtonType: "danger"
  }, "Deleting the universe could have disastrous effects, including but not limited to destroying all life on Earth."));
};
export const ShorthandHook = () => {
  const confirm = useConfirm();
  const {
    theme
  } = useTheme();
  const onButtonClick = useCallback(async event => {
    if ((await confirm({
      title: 'Are you sure?',
      content: 'Do you really want to turn this button green?'
    })) && event.target instanceof HTMLElement) {
      var _theme$colors$auto$gr;

      event.target.style.backgroundColor = (_theme$colors$auto$gr = theme === null || theme === void 0 ? void 0 : theme.colors.auto.green[3]) !== null && _theme$colors$auto$gr !== void 0 ? _theme$colors$auto$gr : 'green';
      event.target.textContent = "I'm green!";
    }
  }, [confirm, theme]);
  return /*#__PURE__*/React.createElement(Flex, {
    flexDirection: "column",
    alignItems: "flex-start"
  }, /*#__PURE__*/React.createElement(Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"), /*#__PURE__*/React.createElement(Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"), /*#__PURE__*/React.createElement(Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"), /*#__PURE__*/React.createElement(Button, {
    mb: 2,
    onClick: onButtonClick
  }, "Turn me green!"));
};
ShorthandHook.displayName = "ShorthandHook";