function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { GitMergeIcon, GitPullRequestIcon, IssueClosedIcon, IssueOpenedIcon, QuestionIcon } from '@primer/octicons-react';
import React from 'react';
import styled from 'styled-components';
import { variant } from 'styled-system';
import { COMMON, get } from './constants';
import StyledOcticon from './StyledOcticon';
import sx from './sx';
const octiconMap = {
  issueOpened: IssueOpenedIcon,
  pullOpened: GitPullRequestIcon,
  issueClosed: IssueClosedIcon,
  pullClosed: GitPullRequestIcon,
  pullMerged: GitMergeIcon,
  draft: GitPullRequestIcon
};
const colorVariants = variant({
  prop: 'status',
  variants: {
    issueClosed: {
      backgroundColor: 'prState.closed.bg',
      color: 'prState.closed.text',
      borderColor: 'prState.closed.border'
    },
    pullClosed: {
      backgroundColor: 'prState.closed.bg',
      color: 'prState.closed.text',
      borderColor: 'prState.closed.border'
    },
    pullMerged: {
      backgroundColor: 'prState.merged.bg',
      color: 'prState.merged.text',
      borderColor: 'prState.merged.border'
    },
    issueOpened: {
      backgroundColor: 'prState.open.bg',
      color: 'prState.open.text',
      borderColor: 'prState.open.border'
    },
    pullOpened: {
      backgroundColor: 'prState.open.bg',
      color: 'prState.open.text',
      borderColor: 'prState.open.border'
    },
    draft: {
      backgroundColor: 'prState.draft.bg',
      color: 'prState.draft.text',
      borderColor: 'prState.draft.border'
    }
  }
});
const sizeVariants = variant({
  prop: 'variant',
  variants: {
    small: {
      paddingX: 2,
      paddingY: 1,
      fontSize: 0
    },
    normal: {
      paddingX: '12px',
      paddingY: 2,
      fontSize: 1
    }
  }
});
const StateLabelBase = styled.span.withConfig({
  displayName: "StateLabel__StateLabelBase",
  componentId: "k4pd9e-0"
})(["display:inline-flex;align-items:center;font-weight:", ";line-height:16px;color:", ";text-align:center;border-radius:", ";border-width:1px;border-style:solid;", ";", ";", ";", ";"], get('fontWeights.bold'), get('colors.bg.primary'), get('radii.3'), colorVariants, sizeVariants, COMMON, sx);

function StateLabel({
  children,
  status,
  variant: variantProp,
  ...rest
}) {
  const octiconProps = variantProp === 'small' ? {
    width: '1em'
  } : {};
  return /*#__PURE__*/React.createElement(StateLabelBase, _extends({}, rest, {
    variant: variantProp,
    status: status
  }), status && /*#__PURE__*/React.createElement(StyledOcticon, _extends({
    mr: 1
  }, octiconProps, {
    icon: octiconMap[status] || QuestionIcon
  })), children);
}

StateLabel.displayName = "StateLabel";
StateLabel.defaultProps = {
  variant: 'normal'
};
export default StateLabel;