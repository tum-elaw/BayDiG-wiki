function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

import { omit, pick } from '@styled-system/props';
import classnames from 'classnames';
import React from 'react';
import styled, { css } from 'styled-components';
import { maxWidth, minWidth, variant, width } from 'styled-system';
import { COMMON, get } from './constants';
import sx from './sx';
const sizeVariants = variant({
  variants: {
    small: {
      minHeight: '28px',
      px: 2,
      py: '3px',
      fontSize: 0,
      lineHeight: '20px'
    },
    large: {
      px: 2,
      py: '10px',
      fontSize: 3
    }
  }
});
const Input = styled.input.withConfig({
  displayName: "TextInput__Input",
  componentId: "sc-1apmpmt-0"
})(["border:0;font-size:inherit;font-family:inherit;background-color:transparent;-webkit-appearance:none;color:inherit;width:100%;&:focus{outline:0;}"]);
const Wrapper = styled.span.withConfig({
  displayName: "TextInput__Wrapper",
  componentId: "sc-1apmpmt-1"
})(["display:inline-flex;align-items:stretch;min-height:34px;font-size:", ";line-height:20px;color:", ";vertical-align:middle;background-repeat:no-repeat;background-position:right 8px center;border:1px solid ", ";border-radius:", ";outline:none;box-shadow:", ";", " .TextInput-icon{align-self:center;color:", ";margin:0 ", ";flex-shrink:0;}&:focus-within{border-color:", ";box-shadow:", ";}", " ", " ", " @media (min-width:", "){font-size:", ";}", " ", " ", " ", " ", " ", ";"], get('fontSizes.1'), get('colors.text.primary'), get('colors.input.border'), get('radii.2'), get('shadows.shadow.inset'), props => {
  if (props.hasIcon) {
    return css(["padding:0;"]);
  } else {
    return css(["padding:6px 12px;"]);
  }
}, get('colors.icon.tertiary'), get('space.2'), get('colors.state.focus.border'), get('shadows.state.focus.shadow'), props => props.contrast && css(["background-color:", ";"], get('colors.input.contrastBg')), props => props.disabled && css(["color:", ";background-color:", ";border-color:", ";"], get('colors.text.secondary'), get('colors.input.disabledBg'), get('colors.input.disabledBorder')), props => props.block && css(["display:block;width:100%;"]), get('breakpoints.1'), get('fontSizes.1'), COMMON, width, minWidth, maxWidth, sizeVariants, sx);
// using forwardRef is important so that other components (ex. SelectMenu) can autofocus the input
const TextInput = React.forwardRef(({
  icon: IconComponent,
  contrast,
  className,
  block,
  disabled,
  theme,
  sx: sxProp,
  ...rest
}, ref) => {
  // this class is necessary to style FilterSearch, plz no touchy!
  const wrapperClasses = classnames(className, 'TextInput-wrapper');
  const wrapperProps = pick(rest);
  const inputProps = omit(rest);
  return /*#__PURE__*/React.createElement(Wrapper, _extends({
    className: wrapperClasses,
    hasIcon: !!IconComponent,
    block: block,
    theme: theme,
    disabled: disabled,
    contrast: contrast,
    sx: sxProp
  }, wrapperProps), IconComponent && /*#__PURE__*/React.createElement(IconComponent, {
    className: "TextInput-icon"
  }), /*#__PURE__*/React.createElement(Input, _extends({
    ref: ref,
    disabled: disabled
  }, inputProps)));
});
TextInput.defaultProps = {
  type: 'text'
};
TextInput.displayName = 'TextInput';
export default TextInput;