import { useEffect, useCallback } from 'react';

const shouldCallClickHandler = ({
  ignoreClickRefs,
  containerRef,
  e
}) => {
  var _containerRef$current;

  let shouldCallHandler = true; // don't call click handler if the mouse event was triggered by an auxiliary button (right click/wheel button/etc)

  if (e instanceof MouseEvent && e.button > 0) {
    shouldCallHandler = false;
  } // don't call handler if the click happened inside of the container


  if ((_containerRef$current = containerRef.current) !== null && _containerRef$current !== void 0 && _containerRef$current.contains(e.target)) {
    shouldCallHandler = false; // don't call handler if click happened on an ignored ref
  } else if (ignoreClickRefs) {
    for (const ignoreRef of ignoreClickRefs) {
      var _ignoreRef$current;

      if (ignoreRef && (_ignoreRef$current = ignoreRef.current) !== null && _ignoreRef$current !== void 0 && _ignoreRef$current.contains(e.target)) {
        shouldCallHandler = false; // if we encounter one, break early, we don't need to go through the rest

        break;
      }
    }
  }

  return shouldCallHandler;
};

export const useOnOutsideClick = ({
  containerRef,
  ignoreClickRefs,
  onClickOutside
}) => {
  const onOutsideClickInternal = useCallback(e => {
    if (shouldCallClickHandler({
      ignoreClickRefs,
      containerRef,
      e
    })) {
      onClickOutside(e);
    }
  }, [onClickOutside, containerRef, ignoreClickRefs]);
  useEffect(() => {
    document.addEventListener('click', onOutsideClickInternal);
    return () => {
      document.removeEventListener('click', onOutsideClickInternal);
    };
  }, [onOutsideClickInternal]);
};